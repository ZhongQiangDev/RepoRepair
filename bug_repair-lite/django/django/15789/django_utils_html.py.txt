Based on the issue description, the bug is in the `json_script()` function where the JSON encoder is hardcoded to `DjangoJSONEncoder`. The issue requests adding an optional `encoder` parameter to allow customizing the JSON encoding.

Here's the fix:

```python
### django/utils/html.py
<<<<<<< SEARCH
def json_script(value, element_id=None):
    """
    Escape all the HTML/XML special characters with their unicode escapes, so
    value is safe to be output anywhere except for inside a tag attribute. Wrap
    the escaped JSON in a script tag.
    """
    from django.core.serializers.json import DjangoJSONEncoder

    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
=======
def json_script(value, element_id=None, encoder=None):
    """
    Escape all the HTML/XML special characters with their unicode escapes, so
    value is safe to be output anywhere except for inside a tag attribute. Wrap
    the escaped JSON in a script tag.

    The encoder parameter allows using a custom JSON encoder class.
    """
    from django.core.serializers.json import DjangoJSONEncoder

    if encoder is None:
        encoder = DjangoJSONEncoder
    
    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)
>>>>>>> REPLACE
```

This change:
1. Adds an optional `encoder` parameter defaulting to None
2. Updates the docstring to document the new parameter
3. Uses the provided encoder if specified, otherwise falls back to DjangoJSONEncoder
4. Maintains the same functionality for existing code that doesn't specify an encoder

The fix allows users to pass their own JSON encoder class while maintaining backwards compatibility with code that doesn't specify an encoder.
