Based on the issue description, the bug is in the `display_for_field` function where it doesn't properly handle JSONField values when they are readonly in the admin interface. The issue causes JSON values to be displayed with Python dictionary syntax (single quotes) rather than valid JSON syntax (double quotes).

We need to modify the `display_for_field` function to add a special case for JSONField that uses the field's `prepare_value` method. Here's the fix:

```python
### django/contrib/admin/utils.py
<<<<<<< SEARCH
    elif isinstance(field, (models.IntegerField, models.FloatField)):
        return formats.number_format(value)
    elif isinstance(field, models.FileField) and value:
        return format_html('<a href="{}">{}</a>', value.url, value)
    else:
        return display_for_value(value, empty_value_display)
=======
    elif isinstance(field, (models.IntegerField, models.FloatField)):
        return formats.number_format(value)
    elif isinstance(field, models.FileField) and value:
        return format_html('<a href="{}">{}</a>', value.url, value)
    elif isinstance(field, models.JSONField):
        return field.prepare_value(value)
    else:
        return display_for_value(value, empty_value_display)
>>>>>>> REPLACE
```

This fix:
1. Adds a new condition to check if the field is a JSONField
2. Uses the field's `prepare_value` method to properly format the JSON value
3. This will ensure JSON values are displayed with proper JSON syntax (double quotes) instead of Python dictionary syntax (single quotes)

The `prepare_value` method of JSONField already handles proper JSON serialization and takes care of the InvalidJSONInput case, making it the right choice for displaying JSON values in the admin interface.
