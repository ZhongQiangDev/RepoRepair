Based on the issue description, there are two problems with the `idiff` function:
1. It doesn't support equations using `Eq`
2. It doesn't support function expressions like `f(x)`

Looking at the code, the main issues are:

1. For `Eq` support: The function needs to convert the equation to standard form (left side - right side = 0)
2. For function expressions: The validation needs to be updated to handle Function objects

Here are the fixes:

```python
### sympy/geometry/util.py
<<<<<<< SEARCH
    if is_sequence(y):
        dep = set(y)
        y = y[0]
    elif isinstance(y, Symbol):
        dep = {y}
    else:
        raise ValueError("expecting x-dependent symbol(s) but got: %s" % y)

    f = dict([(s, Function(
        s.name)(x)) for s in eq.free_symbols if s != x and s in dep])
    dydx = Function(y.name)(x).diff(x)
    eq = eq.subs(f)
=======
    from sympy import Eq
    
    # Convert equation to standard form if it's an Eq object
    if isinstance(eq, Eq):
        eq = eq.lhs - eq.rhs
        
    if is_sequence(y):
        dep = set(y)
        y = y[0]
    elif isinstance(y, (Symbol, Function)):
        dep = {y}
    else:
        raise ValueError("expecting x-dependent symbol(s) but got: %s" % y)

    # Handle both Symbol and Function objects
    f = dict([(s, Function(s.name)(x) if isinstance(s, Symbol) else s) 
              for s in eq.free_symbols if s != x and s in dep])
    dydx = (Function(y.name)(x) if isinstance(y, Symbol) else y).diff(x)
    eq = eq.subs(f)
>>>>>>> REPLACE
```

This fix:
1. Adds support for `Eq` by converting it to standard form (lhs - rhs = 0)
2. Updates the type checking to accept both Symbol and Function objects
3. Modifies the function substitution logic to handle both Symbol and Function cases
4. Updates the derivative calculation to work with both types

The changes ensure that both `idiff(Eq(y*exp(y), x*exp(x)), y, x)` and `idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x)` will work correctly.
