Let me analyze the GitHub problem description and break down the issues:

### Answer 1
**Wrong Behavior**: The opacity setting in `ol/layer/Heatmap` is not working in versions after 6.9.0
**Cause**: There appears to be a regression introduced after OpenLayers version 6.9.0 that specifically affects the opacity handling in the Heatmap layer implementation. This is evidenced by the fact that the same opacity setting works correctly in version 6.9.0 and still works for WebGL Points layers in newer versions.

### Answer 2
**Wrong Behavior**: The opacity: 0.1 setting has no visual effect on the heatmap layer
**Cause**: The opacity property is likely being overridden or ignored in the rendering pipeline of the Heatmap layer. This could be due to:
1. Changes in the WebGL rendering implementation
2. A bug in the layer composition logic
3. The opacity property not being properly passed to the underlying WebGL context

### Answer 3
**Wrong Behavior**: The issue persists regardless of the preserveDrawingBuffer setting
**Cause**: Since removing the preserveDrawingBuffer override doesn't affect the behavior, this indicates that the opacity issue is independent of the buffer preservation settings. This suggests the problem lies in the core layer rendering logic rather than in the buffer handling.

### Conclusion
**Summary**: The main issue is a regression in the Heatmap layer opacity handling that was introduced after OpenLayers version 6.9.0. The problem appears to be specific to the Heatmap layer implementation since other layer types (like WebGL Points) still handle opacity correctly. The issue is independent of buffer preservation settings and likely stems from changes in the core rendering pipeline or layer composition logic. The fact that it worked in version 6.9.0 suggests this is a regression that needs to be fixed in the newer versions of OpenLayers.