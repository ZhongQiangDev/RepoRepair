Let me analyze the problem and break down the wrong behaviors and their causes.

### Answer 1
**Wrong Behavior**: loadStrings() function in p5.js filters out empty lines, while Processing includes them
**Cause**: There appears to be a difference in how p5.js and Processing handle empty lines in their loadStrings() implementation. P5.js is likely applying some form of filtering that removes empty or whitespace-only lines, while Processing preserves these lines as empty strings in the returned array.

### Answer 2
**Wrong Behavior**: Line numbers in GLSL shader error messages don't match the actual source file line numbers
**Cause**: Since loadStrings() is omitting empty lines when loading shader source files, the line numbering becomes misaligned. When the shader compiler processes the code and reports errors, it's referring to line numbers from the original file, but these don't match the filtered version that p5.js is working with.

### Answer 3
**Wrong Behavior**: Inconsistency between p5.js and Processing behavior creates compatibility issues
**Cause**: The different handling of empty lines between p5.js and Processing makes it difficult to port code between the two platforms, as code that relies on line numbers or empty line preservation will behave differently.

### Conclusion
**Summary**: The core issue stems from p5.js's loadStrings() implementation filtering out empty lines, which creates three main problems: 1) inconsistency with Processing's behavior, 2) incorrect line number references in shader error messages, and 3) compatibility issues between p5.js and Processing code. This appears to be a design decision in p5.js that differs from Processing's approach, but it causes practical problems especially when dealing with shader development and debugging.