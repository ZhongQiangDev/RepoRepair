Let me analyze the problem and provide structured answers.

### Answer 1
**Wrong Behavior**: The Select component is not displaying the defaultValue "jack" when using fillProps
**Cause**: The Select component is being used with fillProps="name" but without a dataSource prop. When fillProps is used, it expects a dataSource array to map the value to the corresponding label. Without dataSource, the component cannot find the mapping for the value "jack" to display.

### Answer 2
**Wrong Behavior**: Improper implementation of fillProps functionality
**Cause**: The fillProps property is meant to be used in conjunction with dataSource to specify which field from the data objects should be used as the label. In this case, the code is missing the essential dataSource prop, which should look something like:
```jsx
const dataSource = [
  { name: 'jack', id: 1 },
  { name: 'lucy', id: 2 }
];
```

### Conclusion
**Summary**: The main issue stems from incomplete implementation of the Select component configuration. To fix this, the code needs to:
1. Include a dataSource prop with the appropriate data structure
2. Ensure the fillProps value matches a field name in the dataSource objects
3. Make sure the defaultValue matches one of the values in the dataSource

The correct implementation should look like:
```jsx
const dataSource = [
  { name: 'jack', id: 1 },
  { name: 'lucy', id: 2 }
];

ReactDOM.render(
  <Select 
    fillProps="name" 
    defaultValue="jack" 
    dataSource={dataSource}
  ></Select>, 
  mountNode
);
```