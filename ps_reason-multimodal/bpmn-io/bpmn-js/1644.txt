Based on the provided GitHub problem description and GIF demonstration, I'll analyze the wrong behaviors and their causes:

### Answer 1
**Wrong Behavior**: Multi-instance properties (specifically the loop cardinality) disappear when switching from parallel to sequential multi-instance mode
**Cause**: The property preservation mechanism during task type conversion is not properly implemented. When changing between different multi-instance types, the system is not maintaining the existing multi-instance properties in memory or failing to transfer them to the new configuration.

### Answer 2
**Wrong Behavior**: No warning or confirmation dialog when changing multi-instance types
**Cause**: The UI lacks proper validation and warning mechanisms to alert users that changing the multi-instance type will result in loss of configuration data. This is a UX issue that could prevent accidental data loss.

### Answer 3
**Wrong Behavior**: The multi-instance marker changes but loses functionality
**Cause**: While the visual representation updates to show the new multi-instance type (parallel to sequential), the underlying data model is not properly maintaining the functional properties, suggesting a disconnect between the visual representation and the data model.

### Conclusion
**Summary**: The core issue revolves around data persistence during task type conversion in the BPMN editor. The main problems are:
1. Failure to preserve multi-instance properties during type conversion
2. Lack of proper UI/UX safeguards to prevent accidental data loss
3. Inconsistency between visual representation and underlying data model

This appears to be a technical limitation in version 8.9.0 of the library where the property transfer mechanism during task type conversion needs to be improved to maintain configuration consistency. The implementation should be enhanced to properly preserve all relevant properties when switching between parallel and sequential multi-instance types.