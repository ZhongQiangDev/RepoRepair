### 1. Identify the Wrong Behavior Involved in `GitHub Problem Description`

The GitHub problem description indicates that the current implementation of `Line Tabs` and `ContainedTabs` does not support an "icon-only" variant. The images provided show the desired layout for both `Line Tabs` and `ContainedTabs` with icons only, without any accompanying text labels. The current implementation likely only supports tabs with text labels, and the goal is to add support for an icon-only variant.

### 2. Analyze the Cause Behind the Wrong Behavior

The cause of the wrong behavior is that the current implementation of the `Tab` and `ContainedTab` components does not have the capability to render only icons. The `label` prop is currently used to display text labels, and there is no mechanism to specify that only an icon should be displayed instead of a text label. To fix this, we need to add a new prop or modify the existing props to support an icon-only variant.

### 3. Examine Each File One by One

#### `packages/react/src/components/Tab/next/ContainedTab.js`

This file contains the `ContainedTab` component, which is responsible for rendering a single tab within the `ContainedTabs` component. To support an icon-only variant, we need to modify the `ContainedTab` component to allow for rendering only an icon instead of a text label.

```
packages/react/src/components/Tab/next/ContainedTab.js
function: ContainedTab
```

#### `packages/react/src/components/Tab/next/Tab.js`

This file contains the `Tab` component, which is responsible for rendering a single tab within the `Tabs` component. Similar to `ContainedTab`, we need to modify the `Tab` component to support an icon-only variant.

```
packages/react/src/components/Tab/next/Tab.js
function: Tab
```

#### `packages/react/src/components/Tabs/next/ContainedTabs.js`

This file contains the `ContainedTabs` component, which manages the state and behavior of the `ContainedTab` components. While the `ContainedTabs` component itself does not need to be modified to support an icon-only variant, it is relevant because it uses the `ContainedTab` component.

```
packages/react/src/components/Tabs/next/ContainedTabs.js
function: ContainedTabs
```

#### `packages/react/src/components/Tabs/next/Tabs.js`

This file contains the `Tabs` component, which manages the state and behavior of the `Tab` components. Similar to `ContainedTabs`, the `Tabs` component itself does not need to be modified, but it is relevant because it uses the `Tab` component.

```
packages/react/src/components/Tabs/next/Tabs.js
function: Tabs
```

#### `packages/react/src/components/Tabs/next/Tabs.stories.js`

This file contains storybook stories for the `Tabs` and `ContainedTabs` components. While it is not directly responsible for the implementation of the components, it is relevant because it demonstrates the usage of the components and can be used to test the new icon-only variant.

```
packages/react/src/components/Tabs/next/Tabs.stories.js
function: function_2
function: function_3
```

### Summary

The following files and functions/classes need to be inspected or edited to fix the problem:

```
packages/react/src/components/Tab/next/ContainedTab.js
function: ContainedTab

packages/react/src/components/Tab/next/Tab.js
function: Tab

packages/react/src/components/Tabs/next/ContainedTabs.js
function: ContainedTabs

packages/react/src/components/Tabs/next/Tabs.js
function: Tabs

packages/react/src/components/Tabs/next/Tabs.stories.js
function: function_2
function: function_3
```
