### 1. Identify the Wrong Behavior Involved in `GitHub Problem Description`

The wrong behavior is that when using the `blendMode(ADD)` function in combination with the `point()` function in a WebGL rendering context, the expected additive blending effect does not occur. Instead of the overlapping parts of the red and blue points blending to produce a magenta color, the color of the point drawn later (blue) overwrites the earlier one (red).

### 2. Analyze the Cause Behind the Wrong Behavior

The issue arises because the `_applyColorBlend()` function, which is responsible for setting up the WebGL blending state based on the current blend mode, is not being called within the `_drawPoints()` function. As a result, the WebGL context does not have the correct blending settings applied when rendering the points, leading to the incorrect blending behavior.

### 3. Examine Each File One by One

#### src/core/rendering.js
This file contains no relevant functions/classes.

#### src/webgl/material.js
This file contains no relevant functions/classes.

#### src/webgl/p5.RendererGL.js
This file contains no relevant functions/classes.

#### src/webgl/p5.RendererGL.Retained.js

```
src/webgl/p5.RendererGL.Retained.js
function: function_10
```
