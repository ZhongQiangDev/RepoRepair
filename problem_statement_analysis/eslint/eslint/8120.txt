Let me analyze the GitHub problem description:

### Answer 1
**Wrong Behavior**: The `ignoreRestSiblings` flag in the `no-unused-vars` ESLint rule is not working for function arguments/parameters as expected.
**Cause**: This is likely because the `ignoreRestSiblings` option was designed to work specifically with object destructuring patterns, not function parameters. The flag only ignores rest properties in object destructuring, but doesn't extend to function argument contexts.

### Answer 2
**Wrong Behavior**: ESLint is still showing warnings for unused variables even with the `ignoreRestSiblings` configuration.
**Cause**: Based on the ESLint version being used (3.15.0), this could be a version-specific issue. The `ignoreRestSiblings` option was relatively new at that time and may have had implementation limitations or bugs in that specific version.

### Answer 3
**Wrong Behavior**: The configuration appears correct but doesn't produce the expected behavior.
**Cause**: The issue might be related to the interaction between `babel-eslint` parser and ESLint's `no-unused-vars` rule. Sometimes parser plugins can affect how ESLint interprets and applies certain rules, especially for modern JavaScript features.

### Conclusion
**Summary**: The main issue stems from three key factors: 1) The `ignoreRestSiblings` option's limited scope to object destructuring only, 2) Potential version-specific limitations in ESLint 3.15.0, and 3) Possible parser interaction issues with babel-eslint. To resolve this, users might need to either upgrade to a newer version of ESLint, use alternative rule configurations, or handle unused variables differently in function arguments.