Let me analyze the GitHub problem description and break down the issues:

### Answer 1
**Wrong Behavior**: ESLint throws "Cannot read property 'superCalled' of undefined" error
**Cause**: This is likely due to a version mismatch or incompatibility between babel-eslint and ESLint. The babel-eslint parser version 7.0.0 might not be fully compatible with ESLint 3.8.1 when parsing class inheritance and super() calls.

### Answer 2
**Wrong Behavior**: "Parsing error: Unexpected token" at seemingly random locations
**Cause**: This error typically occurs when:
1. There are trailing empty lines in the file that ESLint cannot properly parse
2. The no-multiple-empty-lines rule is configured but not working correctly with the current parser setup
3. The combination of babel-eslint parser and ESLint version might be struggling with ES6+ syntax

### Answer 3
**Wrong Behavior**: Code that should be valid ES6+ syntax is being flagged as invalid
**Cause**: The environment setup appears to be outdated:
1. Using older versions of tools (ESLint ^3.8.1, babel-eslint ^7.0.0)
2. The react-app configuration might not be properly configured for ES6+ features
3. Missing parser configuration in the ESLint config file (no explicit parser specification)

### Conclusion
**Summary**: The main issues stem from outdated and potentially incompatible tool versions, particularly between ESLint and babel-eslint. The problems manifest as parsing errors and property access errors, suggesting that the toolchain isn't properly configured to handle modern JavaScript syntax. To resolve these issues, you would need to:
1. Upgrade to newer versions of ESLint and babel-eslint
2. Explicitly specify the parser in the ESLint configuration
3. Ensure all dependencies are compatible with each other
4. Consider updating the react-app ESLint configuration to a newer version

The core of the problem appears to be the tooling setup rather than the actual code, as the provided code example is valid ES6+ syntax.