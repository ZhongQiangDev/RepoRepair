### Answer 1
**Wrong Behavior**: The row gets disabled immediately when nothing is selected in the multiselect, and the dropdown is closed.
**Cause**: The current implementation only uses the `onChange` event, which triggers on any change in the selection. This event does not provide a way to determine if the user has finished their selection, leading to premature row disabling and dropdown closure.

### Answer 2
**Wrong Behavior**: The workaround to make it work involves hacky solutions.
**Cause**: The lack of an `onMenuChange` event forces developers to implement custom logic to handle menu visibility changes. This custom logic can be complex and may not always work as expected, leading to inconsistent behavior.

### Answer 3
**Wrong Behavior**: The desired functionality of knowing when the user has finished their selection is not available.
**Cause**: The absence of an `onMenuChange` event means there is no direct way to detect when the menu visibility changes. This makes it difficult to implement the desired behavior of enabling/disabling rows based on the final selection.

### Conclusion
**Summary**: The main issue is the lack of an `onMenuChange` event in the multiselect component. This absence leads to premature row disabling, the need for hacky workarounds, and difficulty in implementing the desired functionality. Adding the `onMenuChange` event would provide a straightforward way to detect menu visibility changes and improve the overall user experience.  
Video 1: ![wkc-role-change-wrong](https://user-images.githubusercontent.com/3808948/99061929-7dc62780-25a2-11eb-9c8d-86bcc074dfb6.gif)  
Video 2: ![wkc-role-change-correct](https://user-images.githubusercontent.com/3808948/99061955-84ed3580-25a2-11eb-9afd-323677fb3418.gif)