Let me analyze the problem based on the GitHub description and screenshots provided:

### Answer 1
**Wrong Behavior**: The dropdown button shows "[object Object]" in its title attribute when an icon is selected
**Cause**: The `itemToString` function is being used to render both the button text and title attribute. When returning an object (for icon rendering) instead of a string, the object gets converted to "[object Object]" in the title attribute.

### Answer 2
**Wrong Behavior**: Inconsistency in rendering between dropdown list items and selected item display
**Cause**: The component uses `itemToElement` for rendering items in the dropdown list, but only uses `itemToString` for the selected item display in the button. There's no option to specify which function should be used for rendering the selected item.

### Answer 3
**Wrong Behavior**: The workaround of hijacking `itemToString` to return objects no longer works properly after version 10.43/7.43
**Cause**: The addition of the title attribute in newer versions exposed a limitation in the current architecture where `itemToString` is expected to return strings (as its name implies) but was being used to handle complex rendering logic.

### Conclusion
**Summary**: The core issue stems from the Dropdown component's architecture not providing sufficient flexibility in how selected items are rendered. The current implementation forces the use of `itemToString` for both the button's text content and title attribute, which breaks when trying to render icons or complex elements. The component needs a way to separately handle:
1. String representation (for accessibility/title attributes)
2. Visual rendering of the selected item
3. List item rendering

A new prop to control which function (`itemToElement` or `itemToString`) is used for rendering the selected item would solve these issues while maintaining backward compatibility.