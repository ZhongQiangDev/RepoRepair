Let me analyze the problem and break down the wrong behaviors and their causes.

### Answer 1
**Wrong Behavior**: Images are being placed outside of custom divs (`.qrcodeblock` and `.qrcodeblockagain`) in Test A and Test C, while they should be contained within these divs.
**Cause**: This appears to be related to how RevealJS handles custom div classes versus its built-in column classes. The custom divs don't have proper styling or layout properties defined to contain block-level elements like images.

### Answer 2
**Wrong Behavior**: The image placement works correctly only in the columns layout (Test B) but not in other custom div structures.
**Cause**: RevealJS has built-in support for the `.columns` and `.column` classes with predefined CSS properties for proper content containment. These classes are specifically designed to handle block-level elements including images, while custom classes don't have these properties by default.

### Answer 3
**Wrong Behavior**: Nested div structure in Test C (`.anotherblocks` and `.qrcodeblockagain`) fails to contain the image properly.
**Cause**: The nested div structure lacks proper CSS definitions for containing block-level elements. Without explicit CSS rules for positioning and layout, the browser's default rendering behavior pushes the image outside the div containers.

### Conclusion
**Summary**: The core issue stems from how RevealJS handles custom div classes versus its built-in classes like `.columns`. The problems occur because:
1. Custom divs lack proper CSS definitions for containing block-level elements
2. RevealJS's default handling of custom divs doesn't maintain the same containment properties as its built-in classes
3. The markdown-to-HTML conversion process might be treating images differently in custom divs versus built-in RevealJS components

To fix these issues, proper CSS styling would need to be added for the custom classes to ensure they can contain block-level elements like images, similar to how RevealJS handles its built-in column classes.