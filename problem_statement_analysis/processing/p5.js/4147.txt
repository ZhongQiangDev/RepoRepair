### Answer 1
**Wrong Behavior**: The vertex colors are not being interpolated correctly in p5.js version 0.9.0, resulting in a solid color instead of a gradient.
**Cause**: There might be a change in the WebGL rendering pipeline between versions 0.8.0 and 0.9.0 that affects how vertex colors are passed to the fragment shader. This could be due to a modification in the shader code or the way vertex attributes are set up.

### Answer 2
**Wrong Behavior**: The expected gradient effect seen in version 0.8.0 is missing in version 0.9.0.
**Cause**: The issue could be related to the way the `fill()` function is being handled in the newer version. It's possible that the `fill()` function is not being applied to each vertex individually as intended, leading to a uniform color across the shape.

### Answer 3
**Wrong Behavior**: The output in version 0.9.0 shows a single color instead of the expected gradient.
**Cause**: There might be a bug in the WebGL context setup or the way the color buffer is being cleared and updated in version 0.9.0. This could be causing the colors to be overwritten or not properly blended.

### Conclusion
**Summary**: The main issue appears to be related to changes in the WebGL rendering pipeline and the handling of vertex colors between p5.js versions 0.8.0 and 0.9.0. The `fill()` function might not be applying colors to each vertex as expected, and there could be a problem with the shader code or the way vertex attributes are set up. Further investigation into the WebGL context setup and color buffer management in version 0.9.0 is needed to pinpoint the exact cause.