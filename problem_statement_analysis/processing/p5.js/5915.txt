### Answer 1
**Wrong Behavior**: The stroke function does not interpolate colors between vertices, resulting in a uniform color for the entire line instead of a gradient.
**Cause**: The stroke function in p5.js is designed to apply a single color to the entire line. It only accepts the last call to the stroke function and does not store or interpolate color information for each vertex.

### Answer 2
**Wrong Behavior**: The current implementation of the vertex function allows for color interpolation for fills but not for strokes.
**Cause**: The vertex function is designed to accept fill colors for each vertex, which are then interpolated during rendering. However, there is no equivalent mechanism for stroke colors, meaning that stroke colors are not stored per vertex and thus cannot be interpolated.

### Conclusion
**Summary**: The primary issue is that the stroke function in p5.js does not support per-vertex color interpolation, unlike the fill function. This is due to the design of the stroke function, which only accepts a single color for the entire line. To achieve the desired effect, modifications are needed in the vertex and fragment shaders to store and interpolate stroke colors per vertex. Additionally, changes are required in the p5.Geometry class to manage and pass the per-vertex stroke color data to the shaders.