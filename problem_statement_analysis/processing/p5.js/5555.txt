### Answer 1
**Wrong Behavior**: The red square with 50% opacity in WebGL mode blends with the blue background of the page instead of the black background of the canvas.
**Cause**: The default setting for the `alpha` attribute in WebGL mode is `true`, which allows the canvas to be transparent and blend with the background color of the page. This causes the red square to blend with the blue background instead of the black background of the canvas.

### Answer 2
**Wrong Behavior**: The blending behavior in WebGL mode is different from the 2D rendering mode, causing unexpected results and confusion.
**Cause**: The default `alpha` setting in WebGL mode is `true`, while in 2D rendering mode, it is `false`. This difference in default settings leads to inconsistent blending behavior between the two modes, causing confusion and unexpected results.

### Conclusion
**Summary**: The main issue is the default `alpha` setting in WebGL mode, which is set to `true`. This causes the red square with 50% opacity to blend with the blue background of the page instead of the black background of the canvas, leading to unexpected results and confusion. Changing the default `alpha` setting to `false` in WebGL mode would bring it in line with the 2D rendering mode and reduce surprises. The only downside is that users who want a transparent canvas background would need to explicitly set `alpha` to `true`, but this is a more niche use case and can be documented.