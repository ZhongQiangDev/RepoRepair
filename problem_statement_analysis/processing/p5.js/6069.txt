I'll analyze the problem and break down the wrong behaviors and their causes.

### Answer 1
**Wrong Behavior**: The blendMode(ADD) is not working correctly when drawing overlapping points in WEBGL mode. Instead of adding the colors together, the later point's color completely overwrites the earlier point's color where they overlap.

**Cause**: The _drawPoints() function in the WebGL renderer is not applying the color blending operation. While the blendMode is set, the actual color blending functionality (_applyColorBlend()) is not being called within the point drawing implementation, unlike other WebGL drawing functions.

### Answer 2
**Wrong Behavior**: The overlapping area shows only blue (the color of the second point) instead of showing purple (red + blue) as expected with ADD blend mode.

**Cause**: This is a direct result of missing blend mode implementation in the WebGL point rendering pipeline. The WebGL context is not properly configured to perform additive blending for points, even though the blend mode is set to ADD. The current implementation simply renders the points in order, with later points overwriting earlier ones.

### Conclusion
**Summary**: The core issue stems from incomplete implementation of blend mode support in the WebGL point rendering system. The main cause is the missing _applyColorBlend() call in the _drawPoints() method of the WebGL renderer. The suggested solution to add this line:
```javascript
this._applyColorBlend(this.curStrokeColor);
```
would properly enable the blend mode functionality for points, making them behave consistently with other WebGL drawing operations. This would allow the ADD blend mode to work as expected, creating the purple color in overlapping areas of red and blue points.