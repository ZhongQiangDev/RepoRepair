### Answer 1
**Wrong Behavior**: The color of the overlapping part of the points becomes the color of the point drawn later instead of the expected additive blend color.
**Cause**: The `_applyColorBlend()` function is not being called in the `_drawPoints()` method. This function is responsible for applying the blend mode to the current stroke color, which is necessary for achieving the additive blending effect. Without this function call, the blend mode specified by `blendMode(ADD)` is not applied correctly to the points being drawn.

### Answer 2
**Wrong Behavior**: The points are not blending as expected when using the `ADD` blend mode.
**Cause**: The WebGL rendering pipeline for points in p5.js does not include the necessary steps to apply the blend mode specified by `blendMode(ADD)`. Specifically, the `_applyColorBlend()` function, which is responsible for setting up the blending operation, is missing from the `_drawPoints()` method. This omission prevents the WebGL context from correctly blending the colors of overlapping points according to the specified blend mode.

### Conclusion
**Summary**: The primary issue is that the `_applyColorBlend()` function is not being called in the `_drawPoints()` method, which is responsible for drawing points in WebGL. This omission results in the blend mode not being applied correctly, leading to the wrong behavior where the color of the overlapping part of the points becomes the color of the point drawn later instead of the expected additive blend color. Adding the call to `_applyColorBlend(this.curStrokeColor)` in the `_drawPoints()` method should fix the bug and ensure that the points blend correctly according to the specified blend mode.