### Answer 1
**Wrong Behavior**: `loadStrings()` omits empty lines when loading a file.
**Cause**: The implementation of `loadStrings()` in p5.js filters out empty lines, which is different from the behavior in Processing. This discrepancy is likely due to the way the function is designed to handle whitespace in p5.js, where empty lines are considered unnecessary and thus removed from the resulting array.

### Answer 2
**Wrong Behavior**: Line numbers for errors in GLSL shaders loaded by `loadShader` do not match the lines in the source files.
**Cause**: Since `loadStrings()` omits empty lines, the line numbers in the loaded shader code do not correspond to the original line numbers in the source file. This makes it difficult to locate and debug errors in the shader code, as the reported line numbers are offset due to the missing empty lines.

### Conclusion
**Summary**: The primary issue is the difference in behavior between `loadStrings()` in p5.js and Processing, where p5.js filters out empty lines. This causes discrepancies in line numbers when loading files, particularly affecting the debugging of GLSL shaders. To resolve this, the `loadStrings()` function in p5.js should be modified to include empty lines, ensuring consistency with Processing and accurate line number reporting.