Based on the provided GitHub problem description and GIF demonstration, I'll analyze the wrong behaviors and their causes:

### Answer 1
**Wrong Behavior**: Multi-instance properties (specifically the loop cardinality) disappear when switching from parallel to sequential multi-instance mode
**Cause**: The property preservation logic is not properly implemented when switching between different multi-instance types. The system appears to reset or clear the multi-instance properties instead of maintaining them during the transition.

### Answer 2
**Wrong Behavior**: No warning or confirmation dialog is shown when changing multi-instance types
**Cause**: The UI lacks validation or warning mechanisms to inform users that changing the multi-instance type might result in loss of properties. This is a UX issue that could prevent accidental data loss.

### Answer 3
**Wrong Behavior**: The state is not properly preserved in the BPMN model
**Cause**: The internal data model likely doesn't maintain the multi-instance attributes as part of the core task properties, treating them instead as type-specific properties that get cleared during type changes.

### Conclusion
**Summary**: The main issue centers around the loss of multi-instance properties when switching between parallel and sequential execution modes. This appears to be caused by three main factors: improper property preservation during type switching, lack of warning mechanisms, and insufficient state management in the underlying data model. The bug affects version 8.9.0 of the library and impacts the usability of the BPMN modeler, particularly when users need to modify existing multi-instance tasks. To fix this, the implementation should:
1. Preserve multi-instance properties during type changes
2. Add appropriate warning mechanisms
3. Improve the internal data model to better handle property persistence across type changes