### Answer 1
**Wrong Behavior**: The drilldown overlay is not aware of root changes, leading to an error when trying to move back to the parent process.
**Cause**: The `Canvas.setRootElement` function is not being updated or notified when the root element changes. This results in the `rootElement required` error because the function expects a valid root element to be set before it can proceed.

### Answer 2
**Wrong Behavior**: The drilldown overlay fails to properly handle the transition between sub-processes and the parent process.
**Cause**: The drilldown overlay logic may not be correctly tracking the current root element or updating its internal state when the root element changes. This could be due to a lack of event listeners or incorrect state management within the overlay component.

### Answer 3
**Wrong Behavior**: The error message `Uncaught Error: rootElement required` is thrown when trying to move back to the parent process.
**Cause**: The error is likely thrown because the `Canvas.setRootElement` function is being called without a valid root element. This could be due to the root element not being properly set or updated when the process changes.

### Conclusion
**Summary**: The main issue is that the drilldown overlay is not properly handling root element changes, leading to an error when trying to move back to the parent process. This is likely due to a combination of incorrect state management, lack of event listeners, and the `Canvas.setRootElement` function not being updated with the correct root element. To fix this, the drilldown overlay logic needs to be updated to correctly track and update the root element when it changes. Additionally, the `Canvas.setRootElement` function should be called with a valid root element to prevent the error from being thrown.  
Video 1: The video shows the process of creating a sub-process and the error that occurs when trying to move back to the parent process. This confirms the issue described in the GitHub problem description.