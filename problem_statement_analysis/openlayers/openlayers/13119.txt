Let me analyze the GitHub problem description and break down the issues:

### Answer 1
**Wrong Behavior**: Limited blending functionality in WebGL TileLayers
**Cause**: The current OpenLayers implementation has fixed WebGL blending functions (in webgl/Helper.js) that don't allow for customization at the TileLayer level. Specifically, users cannot set gl.blendFunc(gl.ONE, gl.ONE) for individual layers.

### Answer 2
**Wrong Behavior**: Inability to selectively apply different blending modes to specific TileLayers
**Cause**: There's no parameter or flag in the TileLayer API to specify custom WebGL blending options, making it impossible to have different blending behaviors for different layers in the same visualization.

### Answer 3
**Wrong Behavior**: Potential performance impact from workarounds
**Cause**: Without native support for custom blending functions, users might need to fall back to offscreen rendering or other workarounds, which could negatively impact the performance benefits gained from using WebGL TileLayers.

### Conclusion
**Summary**: The core issue revolves around the lack of flexibility in OpenLayers' WebGL rendering pipeline, specifically regarding blend function customization. While the library has improved performance with WebGL TileLayers, it currently lacks the ability to specify custom blending options at the layer level. This limitation affects users who need to implement specialized visualization effects, such as the microscopy image viewer described in the issue. The main technical limitation is in the WebGL Helper class, which uses fixed blending functions instead of allowing per-layer configuration.

The solution would require adding a new API parameter to the TileLayer style configuration that would allow users to specify custom WebGL blending functions for individual layers.