### Answer 1
**Wrong Behavior**: The opacity option in `ol/layer/Heatmap` is ignored and has no effect on the heatmap layer.
**Cause**: There might be a regression in the codebase between version 6.9.0 and the latest dev version that caused the opacity option to be ignored. This could be due to changes in the rendering pipeline or the way the heatmap layer is handled in the newer versions.

### Answer 2
**Wrong Behavior**: The issue persists even after removing the `preserveDrawingBuffer` override.
**Cause**: The `preserveDrawingBuffer` override might not be related to the opacity issue. The problem could be caused by other factors, such as changes in the WebGL context or the way the heatmap layer is rendered in the newer versions.

### Answer 3
**Wrong Behavior**: The opacity setting works for a WebGL Points layer in the latest version but not for the heatmap layer.
**Cause**: There might be differences in the implementation of the WebGL Points layer and the heatmap layer that cause the opacity option to work for one but not the other. This could be due to differences in the way the layers are rendered or the way the opacity is applied to the layers.

### Conclusion
**Summary**: The opacity option in `ol/layer/Heatmap` is ignored due to a regression in the codebase between version 6.9.0 and the latest dev version. The issue is not related to the `preserveDrawingBuffer` override and might be caused by changes in the rendering pipeline or the way the heatmap layer is handled in the newer versions. The opacity setting works for a WebGL Points layer in the latest version but not for the heatmap layer, which could be due to differences in the implementation of the layers. To fix the issue, the codebase needs to be analyzed to identify the changes that caused the regression and the differences in the implementation of the layers.