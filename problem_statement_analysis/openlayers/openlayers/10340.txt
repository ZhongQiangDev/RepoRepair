Let me analyze the GitHub issue and break down the problems and their causes.

### Answer 1
**Wrong Behavior**: Drawn circles don't extend to the pointer position as expected when useGeographic is enabled, especially noticeable in higher latitudes.
**Cause**: This is likely due to the difference between geographic coordinates (lat/long) and screen coordinates. In geographic mode, the distance between longitude lines varies with latitude (they converge at the poles), while in screen space, distances are uniform. This distortion becomes more pronounced at higher latitudes due to map projection mathematics.

### Answer 2
**Wrong Behavior**: Regular shapes created using createRegularPolygon appear distorted and irregular in the view.
**Cause**: The distortion occurs because regular polygons are being drawn in geographic coordinates (WGS84) but displayed in a projected coordinate system. What appears regular in one coordinate system becomes distorted in another due to the mathematical transformations involved in map projections.

### Answer 3
**Wrong Behavior**: Creating perfect boxes using createBox becomes impossible when the view projection is not parallel to WGS84.
**Cause**: The box creation tool assumes a rectangular shape in the input coordinate system, but when displayed in a different projection (especially when not parallel to WGS84), the transformation causes the shape to become distorted. This is fundamentally a projection mismatch issue between the coordinate system used for drawing and the display projection.

### Conclusion
**Summary**: The core issues stem from the interaction between different coordinate systems and projections. When useGeographic is enabled, there's a fundamental mismatch between how shapes are drawn (in geographic coordinates) and how they're displayed (in projected coordinates). This affects three main aspects:
1. Circle drawing accuracy and size
2. Regular polygon shape preservation
3. Box drawing functionality

The main underlying cause across all these issues is the challenge of maintaining geometric properties (like shape and size) when transforming between geographic and projected coordinate systems. The current implementation doesn't properly account for these transformations, leading to unexpected visual results.