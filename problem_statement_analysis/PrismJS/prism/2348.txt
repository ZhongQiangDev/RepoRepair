Let me analyze the syntax highlighting issues in the C++ code:

### Answer 1
**Wrong Behavior**: The class name `QMainWindow` in the inheritance declaration `class MainWindow : public QMainWindow` is not being highlighted by PrismJS
**Cause**: PrismJS's C++ grammar rules likely don't recognize class names in inheritance contexts after the `public` keyword. The tokenizer may be treating it as a regular identifier instead of a class name token.

### Answer 2
**Wrong Behavior**: The class name `MainWindow` in the method definition `void MainWindow::changeWindowTitle()` is not being highlighted
**Cause**: PrismJS's C++ grammar rules appear to not properly handle class names when they appear before the scope resolution operator (`::`). The tokenizer is likely treating it as a regular identifier rather than detecting it's a class name in a method definition context.

### Answer 3
**Wrong Behavior**: Inconsistent highlighting between class declaration and usage contexts
**Cause**: PrismJS seems to only recognize class names at their declaration point (`class MainWindow`) but fails to maintain that token information for subsequent uses of the same identifier in different contexts (inheritance and method definitions).

### Conclusion
**Summary**: The core issue stems from PrismJS's C++ grammar implementation having incomplete rules for class name token detection. While it can highlight class names at their declaration points, it fails to:
1. Recognize class names in inheritance clauses after access specifiers
2. Detect class names before scope resolution operators
3. Maintain consistent highlighting of class identifiers across different usage contexts

This appears to be a limitation in PrismJS's C++ language definition that needs to be enhanced to handle these common C++ syntax patterns correctly, similar to how GitHub's syntax highlighter handles them.