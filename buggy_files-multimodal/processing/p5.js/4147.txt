I'll analyze the GitHub problem description and identify the files most related to the issue.

## 1. Identifying the Wrong Behavior

The issue involves vertex colors in WEBGL mode not working as expected in p5.js version 0.9.0 compared to version 0.8.0. Specifically, when using `fill()` commands between `vertex()` calls in a custom shape, the colors aren't being properly applied to each vertex in version 0.9.0, resulting in a solid-colored shape instead of the expected color gradient.

## 2. Analyzing the Cause

Based on the description and images, in p5.js 0.8.0, each vertex correctly retained its own fill color, creating a gradient effect across the shape. However, in version 0.9.0, this behavior changed, and the shape appears to be using only one color (likely the last color specified) for the entire shape.

This suggests a change in how vertex colors are handled in the WebGL rendering pipeline between these versions. The issue is likely in how color information is stored, passed, or applied to vertices when using the immediate mode drawing functions (`beginShape()`, `vertex()`, `endShape()`).

## 3. Files Most Related to the Cause

After analyzing the repository information, these are the most relevant files to the issue:

```
src/webgl/p5.RendererGL.Immediate.js
src/core/shape/vertex.js
src/webgl/p5.Shader.js
src/webgl/p5.RendererGL.js
src/color/p5.Color.js
```

The issue is most likely in `p5.RendererGL.Immediate.js`, which handles immediate mode rendering in WebGL, including how vertex colors are processed. The `vertex.js` file defines the core vertex functionality, while `p5.Shader.js` and `p5.RendererGL.js` handle the WebGL rendering pipeline. The `p5.Color.js` file might be relevant for how colors are processed and passed to the renderer.
