I'll analyze the GitHub problem description and identify the files that need to be edited to fix the issue.

## 1. Identifying the Wrong Behavior
The problem is that `blendMode(ADD)` is not working correctly when drawing points in WebGL mode. When two points with different colors overlap, instead of blending the colors additively (which would make the overlapping area appear as a mix of both colors), the color of the point drawn later completely replaces the earlier one.

## 2. Analyzing the Cause
Based on the problem description and the suggested solution, the issue appears to be that the `_applyColorBlend()` function is not being called in the `_drawPoints()` method of the WebGL renderer. This function is responsible for setting up the proper blending mode in WebGL, but it's missing from the point drawing pipeline, causing points to be drawn without respecting the current blend mode.

## 3. Files Most Related to the Cause
Looking at the repository information and the problem description, these are the most relevant files:

```
src/webgl/p5.RendererGL.js
src/webgl/material.js
src/core/rendering.js
src/webgl/p5.RendererGL.Retained.js
```

The most important file is `src/webgl/p5.RendererGL.js` which likely contains the `_drawPoints()` method that needs to be modified. The `src/webgl/material.js` file contains the `_applyColorBlend()` function that needs to be called. The `src/core/rendering.js` file contains the `blendMode()` function implementation, and `src/webgl/p5.RendererGL.Retained.js` contains related WebGL rendering code that might be affected by this change.
