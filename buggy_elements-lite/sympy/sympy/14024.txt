Let me analyze this step by step:

1. Wrong Behavior:
The problem shows inconsistency in evaluating (-a)**x * a**(-x) when a is a positive integer. For the same expression with x = -10/3:
- When a is a symbolic positive integer, the result is -0.5 + 0.866025403784439*I
- When a = 2, the result is 0.5 - 0.866025403784439*I
The signs are opposite in both the real and imaginary parts.

2. Cause Analysis:
The issue appears to be in the simplification of (-a)**x * a**(-x) to (-1)**x. This simplification assumes that (-a)**x can be written as (-1)**x * a**x, which is not always valid for non-integer exponents due to branch cuts in complex analysis. The branch cut for negative numbers raised to fractional powers can lead to different results depending on how the expression is evaluated.

3. Relevant Files/Functions:

sympy/core/exprtools.py:
```
sympy/core/exprtools.py
function: decompose_power
function: decompose_power_rat
class: Factors
```
This file is relevant as it handles power expressions and their decomposition, which is central to the issue.

sympy/core/numbers.py:
```
sympy/core/numbers.py
class: Number
class: Integer
class: Rational
```
This file is relevant as it handles numeric types and their operations, including power operations.

sympy/functions/elementary/complexes.py:
```
sympy/functions/elementary/complexes.py
class: Abs
```
This file is relevant as it deals with complex number operations and branch cuts.

sympy/functions/elementary/exponential.py:
```
sympy/functions/elementary/exponential.py
class: exp
class: log
```
This file is relevant as it handles exponential and logarithmic operations which are involved in power simplification.

sympy/simplify/simplify.py:
```
sympy/simplify/simplify.py
function: simplify
```
This file is relevant as it's the main function performing the problematic simplification.
