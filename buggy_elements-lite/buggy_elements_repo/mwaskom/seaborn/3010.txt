Let me analyze this step by step.

1. Wrong Behavior:
The PolyFit statistical transformation fails when there are missing values (None) in the input data. The error occurs during the polynomial fitting process, specifically when trying to perform linear algebra operations on data containing null values.

2. Cause Analysis:
The issue stems from the PolyFit class not properly handling missing data before attempting polynomial fitting. When numpy's polyfit function encounters None/NaN values, it fails to perform the necessary linear algebra calculations, resulting in a LinAlgError. The error trace shows this occurs in the _fit_predict method of PolyFit.

3. Relevant Functions/Classes Analysis:

seaborn/regression.py:
This file contains no relevant functions/classes.

seaborn/utils.py:
```
seaborn/utils.py
function: remove_na
```

seaborn/_core/plot.py:
```
seaborn/_core/plot.py
class: Plot
class: Plotter
```

seaborn/_stats/regression.py:
```
seaborn/_stats/regression.py
class: PolyFit
```

The key locations are:
- PolyFit class in regression.py is the primary location where the fix is needed, as it needs to handle missing data before fitting
- remove_na function in utils.py could be utilized to clean the data before fitting
- Plot and Plotter classes in plot.py are relevant as they handle the data flow and statistical transformations, though they're more peripheral to the core issue

The main focus should be on modifying the PolyFit class to properly handle missing data, potentially by incorporating the remove_na utility function before performing the polynomial fit.
