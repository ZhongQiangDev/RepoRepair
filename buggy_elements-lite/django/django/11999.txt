Let me analyze this step by step:

1. Wrong Behavior:
The issue is that in Django 2.2+, the get_FOO_display() method for model fields with choices cannot be overridden. In the example, get_foo_bar_display() is overridden to return "something", but it still returns the actual choice value ('foo' or 'bar') instead.

2. Cause Analysis:
The cause appears to be related to how Django handles the get_FOO_display() method generation for fields with choices. This method is typically auto-generated by Django to return the human-readable value for a choice field. The behavior change in 2.2+ suggests that the method generation or field handling logic was modified to prevent overriding.

3. Examining Files:

django/db/models/base.py:
```
django/db/models/base.py
class: Model
class: ModelBase
```
These classes are relevant as they handle the core model functionality and metaclass operations that generate field-related methods.

django/db/models/options.py:
This file contains no relevant functions/classes.

django/db/models/fields/mixins.py:
```
django/db/models/fields/mixins.py
class: FieldCacheMixin
```
This class is relevant as it handles field value caching which could affect how choice values are retrieved.

django/db/models/fields/__init__.py:
```
django/db/models/fields/__init__.py
class: Field
class: CharField
```
These classes are relevant as they handle the base field functionality and specifically character fields with choices.

django/utils/functional.py:
This file contains no relevant functions/classes.

The issue likely stems from changes in how ModelBase or Field classes handle method generation for choice fields, possibly making the display methods non-overridable by design. The core functionality would be in the Model/ModelBase classes where field descriptors are created, and in the Field/CharField classes where choice handling is implemented.
