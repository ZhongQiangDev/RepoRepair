Let me analyze this step by step:

1. Wrong Behavior:
The issue is that when `__all__ = []` is defined in a Python module, autodoc still shows all functions (foo, bar, baz) in the documentation instead of showing nothing. According to Python's import system, an empty `__all__` list should explicitly indicate that no names should be exported/documented.

2. Cause Analysis:
The cause appears to be that Sphinx's autodoc system is not properly respecting the empty `__all__` attribute when determining which members to document. When `:members:` is specified in the RST file, it should check the module's `__all__` attribute first, and if it's empty, no members should be documented.

3. Relevant Files/Functions Analysis:

sphinx/domains/python.py:
```
sphinx/domains/python.py
class: PythonDomain
```
This class handles Python-specific documentation behavior and could be involved in determining which members to document.

sphinx/ext/autodoc/directive.py:
```
sphinx/ext/autodoc/directive.py
class: AutodocDirective
```
This class is responsible for processing autodoc directives and could be involved in handling the `:members:` directive.

sphinx/ext/autodoc/mock.py:
This file contains no relevant functions/classes.

sphinx/ext/autodoc/typehints.py:
This file contains no relevant functions/classes.

sphinx/ext/autosummary/generate.py:
```
sphinx/ext/autosummary/generate.py
function: generate_autosummary_docs
function: generate_autosummary_content
```
These functions are involved in generating documentation content and could be related to member selection, though they're more focused on autosummary than autodoc.

The core issue likely lies in how the AutodocDirective class processes the `:members:` directive and how PythonDomain handles module member documentation. These components need to properly check and respect the `__all__` attribute when determining which members to include in the documentation.
