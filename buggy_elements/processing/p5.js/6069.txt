### 1. Identify the Wrong Behavior Involved in `GitHub Problem Description`

The wrong behavior is that when using the `blendMode(ADD)` function in combination with the `point()` function in WebGL mode, the colors of overlapping points do not blend as expected. Instead of the overlapping area showing a combined color (e.g., magenta for red and blue), the color of the point drawn later overwrites the color of the point drawn earlier.

### 2. Analyze the Cause Behind the Wrong Behavior

The issue arises because the `_applyColorBlend()` function, which is responsible for setting up the WebGL blending mode based on the current color and blend mode, is not being called in the `_drawPoints()` function. As a result, the WebGL context does not properly apply the specified blend mode when rendering points, leading to the incorrect color blending behavior.

### 3. Examine Each File One by One

#### src/core/rendering.js
```
This file contains no relevant functions/classes.
```

#### src/webgl/material.js
```
This file contains no relevant functions/classes.
```

#### src/webgl/p5.RendererGL.Immediate.js
```
src/webgl/p5.RendererGL.Immediate.js
function: function_4
```

#### src/webgl/p5.RendererGL.js
```
src/webgl/p5.RendererGL.js
function: function_16
function: function_17
function: function_10
function: function_9
```

#### src/webgl/p5.RendererGL.Retained.js
```
src/webgl/p5.RendererGL.Retained.js
function: function_10
```

### Summary of Relevant Locations

The relevant locations that need inspection or editing to fix the problem are:

```
src/webgl/p5.RendererGL.Immediate.js
function: function_4

src/webgl/p5.RendererGL.js
function: function_16
function: function_17
function: function_10
function: function_9

src/webgl/p5.RendererGL.Retained.js
function: function_10
```
