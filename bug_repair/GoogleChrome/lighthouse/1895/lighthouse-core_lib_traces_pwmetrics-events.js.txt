The issue described is related to the error "Cannot read property 'ts' of undefined," which occurs when trying to generate a report after a Chrome extension update. The error seems to be related to the `gatherMetrics` method, where it tries to access `metric.ts` but `metric` is undefined.

The problem likely stems from the `metricsDefinitions` static method, where the `getTs` functions might be returning `undefined` for some metrics. This can happen if the `auditResults` object does not contain the expected keys or if the `extendedInfo` or `value.timestamps` properties are missing.

To fix this issue, we need to add checks to ensure that the `extendedInfo` and `value.timestamps` properties exist before trying to access them. We can do this by adding conditional checks within the `getTs` functions.

Here is the proposed fix:

```javascript
###lighthouse-core/lib/traces/pwmetrics-events.js
<<<<<<< SEARCH
      getTs: auditResults => {
        const fmpExt = auditResults['first-meaningful-paint'].extendedInfo;
        return fmpExt.value.timestamps.navStart;
      }
=======
      getTs: auditResults => {
        const fmpExt = auditResults['first-meaningful-paint'] && auditResults['first-meaningful-paint'].extendedInfo;
        return fmpExt && fmpExt.value && fmpExt.value.timestamps && fmpExt.value.timestamps.navStart;
      }
>>>>>>> REPLACE
<<<<<<< SEARCH
      getTs: auditResults => {
        const fmpExt = auditResults['first-meaningful-paint'].extendedInfo;
        return fmpExt.value.timestamps.fCP;
      }
=======
      getTs: auditResults => {
        const fmpExt = auditResults['first-meaningful-paint'] && auditResults['first-meaningful-paint'].extendedInfo;
        return fmpExt && fmpExt.value && fmpExt.value.timestamps && fmpExt.value.timestamps.fCP;
      }
>>>>>>> REPLACE
<<<<<<< SEARCH
      getTs: auditResults => {
        const fmpExt = auditResults['first-meaningful-paint'].extendedInfo;
        return fmpExt.value.timestamps.fMP;
      }
=======
      getTs: auditResults => {
        const fmpExt = auditResults['first-meaningful-paint'] && auditResults['first-meaningful-paint'].extendedInfo;
        return fmpExt && fmpExt.value && fmpExt.value.timestamps && fmpExt.value.timestamps.fMP;
      }
>>>>>>> REPLACE
<<<<<<< SEARCH
      getTs: auditResults => {
        const siExt = auditResults['speed-index-metric'].extendedInfo;
        return siExt.value.timestamps.perceptualSpeedIndex;
      }
=======
      getTs: auditResults => {
        const siExt = auditResults['speed-index-metric'] && auditResults['speed-index-metric'].extendedInfo;
        return siExt && siExt.value && siExt.value.timestamps && siExt.value.timestamps.perceptualSpeedIndex;
      }
>>>>>>> REPLACE
<<<<<<< SEARCH
      getTs: auditResults => {
        const siExt = auditResults['speed-index-metric'].extendedInfo;
        return siExt.value.timestamps.firstVisualChange;
      }
=======
      getTs: auditResults => {
        const siExt = auditResults['speed-index-metric'] && auditResults['speed-index-metric'].extendedInfo;
        return siExt && siExt.value && siExt.value.timestamps && siExt.value.timestamps.firstVisualChange;
      }
>>>>>>> REPLACE
<<<<<<< SEARCH
      getTs: auditResults => {
        const siExt = auditResults['time-to-interactive'].extendedInfo;
        return siExt.value.timestamps.visuallyReady;
      }
=======
      getTs: auditResults => {
        const siExt = auditResults['time-to-interactive'] && auditResults['time-to-interactive'].extendedInfo;
        return siExt && siExt.value && siExt.value.timestamps && siExt.value.timestamps.visuallyReady;
      }
>>>>>>> REPLACE
<<<<<<< SEARCH
      getTs: auditResults => {
        const siExt = auditResults['speed-index-metric'].extendedInfo;
        return siExt.value.timestamps.visuallyComplete;
      }
=======
      getTs: auditResults => {
        const siExt = auditResults['speed-index-metric'] && auditResults['speed-index-metric'].extendedInfo;
        return siExt && siExt.value && siExt.value.timestamps && siExt.value.timestamps.visuallyComplete;
      }
>>>>>>> REPLACE
<<<<<<< SEARCH
      getTs: auditResults => {
        const ttiExt = auditResults['time-to-interactive'].extendedInfo;
        return ttiExt.value.timestamps.timeToInteractive;
      }
=======
      getTs: auditResults => {
        const ttiExt = auditResults['time-to-interactive'] && auditResults['time-to-interactive'].extendedInfo;
        return ttiExt && ttiExt.value && ttiExt.value.timestamps && ttiExt.value.timestamps.timeToInteractive;
      }
>>>>>>> REPLACE
```

These changes ensure that the `getTs` functions only attempt to access the `timestamps` property if all the necessary parent properties exist, preventing the "Cannot read property 'ts' of undefined" error.
