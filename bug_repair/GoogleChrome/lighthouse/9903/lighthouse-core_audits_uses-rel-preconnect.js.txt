The issue described is that the Lighthouse audit keeps suggesting additional origins for preconnect even after the suggested origins have been added. This suggests that the audit logic might not be correctly identifying when a preconnect has been successfully added and utilized.

The problem seems to be related to the logic that checks if a preconnect has been added and used. Specifically, the check for the `crossorigin` attribute might not be correctly identifying when a preconnect is valid.

Here's a potential fix:

```javascript
###lighthouse-core/audits/uses-rel-preconnect.js
<<<<<<< SEARCH
      if (preconnectOrigins.has(securityOrigin)) {
        // Add a warning for any origin the user tried to preconnect to but failed
        warnings.push(str_(UIStrings.crossoriginWarning, {securityOrigin}));
        return;
      }
=======
      if (preconnectOrigins.has(securityOrigin)) {
        // Check if the preconnect was used by checking if the connection time is less than the wasted time
        const preconnectRecord = preconnectLinks.find(link => URL.getOrigin(link.href || '') === securityOrigin);
        if (preconnectRecord && preconnectRecord.crossOrigin) {
          // If the preconnect was used, skip this origin
          return;
        } else {
          // Add a warning for any origin the user tried to preconnect to but failed
          warnings.push(str_(UIStrings.crossoriginWarning, {securityOrigin}));
          return;
        }
      }
>>>>>>> REPLACE
```

This change adds a check to see if the `crossOrigin` attribute is set on the preconnect link. If it is, it assumes the preconnect was used and skips the origin. If not, it adds a warning as before. This should help the audit correctly identify when a preconnect has been added and used.
