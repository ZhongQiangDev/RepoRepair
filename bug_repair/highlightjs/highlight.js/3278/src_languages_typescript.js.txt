The issue seems to be related to the handling of TypeScript generics with the `extends` keyword. The problem appears to be in the way the TypeScript language definition is parsing the `extends` keyword within generic types. The commit mentioned in the issue might have introduced a change that affects the parsing of these constructs.

To fix this, we need to ensure that the `extends` keyword is properly recognized within generic type definitions. We can do this by adding a specific rule for the `extends` keyword within the TypeScript language definition.

Here's the proposed fix:

```typescript
### src/languages/typescript.js
<<<<<<< SEARCH
const INTERFACE = {
    beginKeywords: 'interface', end: /\{/, excludeEnd: true,
    keywords: 'interface extends'
};
=======
const INTERFACE = {
    beginKeywords: 'interface', end: /\{/, excludeEnd: true,
    keywords: 'interface extends',
    contains: [
        {
            className: 'keyword',
            begin: /\bextends\b/,
            relevance: 0
        }
    ]
};
>>>>>>> REPLACE
```

This change adds a specific rule to recognize the `extends` keyword within the `INTERFACE` mode. This should help in correctly highlighting the `extends` keyword within generic type definitions.

Additionally, we should also ensure that the `extends` keyword is properly recognized within other generic type definitions. We can do this by adding a similar rule to the `PARAMS_CONTAINS` array:

```typescript
### src/languages/typescript.js
<<<<<<< SEARCH
tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);
=======
tsLanguage.exports.PARAMS_CONTAINS.push(
    DECORATOR,
    {
        className: 'keyword',
        begin: /\bextends\b/,
        relevance: 0
    }
);
>>>>>>> REPLACE
```

These changes should help in correctly highlighting the `extends` keyword within generic type definitions and resolve the issue.
