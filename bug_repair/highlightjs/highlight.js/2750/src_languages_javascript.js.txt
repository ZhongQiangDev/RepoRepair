The issue described is related to the handling of template literals with nested curly braces in JavaScript and TypeScript. The current implementation of the `SUBST` rule in the `javascript.js` file does not correctly handle nested curly braces within template literals, leading to incorrect highlighting.

To fix this, we need to modify the `SUBST` rule to allow for nested curly braces. This can be achieved by adding a new rule that matches nested curly braces within the `SUBST` rule.

Here's the proposed fix:

```javascript
### src/languages/javascript.js
<<<<<<< SEARCH
    const SUBST = {
      className: 'subst',
      begin: '\\$\\{',
      end: '\\}',
      keywords: KEYWORDS,
      contains: [] // defined later
    };
=======
    const NESTED_SUBST = {
      className: 'subst',
      begin: '\\{',
      end: '\\}',
      keywords: KEYWORDS,
      contains: [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        HTML_TEMPLATE,
        CSS_TEMPLATE,
        TEMPLATE_STRING,
        NUMBER,
        hljs.REGEXP_MODE,
        NESTED_SUBST // Allow nested curly braces
      ]
    };

    const SUBST = {
      className: 'subst',
      begin: '\\$\\{',
      end: '\\}',
      keywords: KEYWORDS,
      contains: [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        HTML_TEMPLATE,
        CSS_TEMPLATE,
        TEMPLATE_STRING,
        NUMBER,
        hljs.REGEXP_MODE,
        NESTED_SUBST // Allow nested curly braces
      ]
    };
>>>>>>> REPLACE
```

This modification introduces a new rule `NESTED_SUBST` that allows for nested curly braces within the `SUBST` rule. This should resolve the issue with incorrect highlighting of template literals containing nested curly braces.
