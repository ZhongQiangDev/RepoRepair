The issue is that the PowerShell syntax highlighting in the code is not correctly highlighting double hyphen flags (`--flag`) as it should. The current implementation only highlights single hyphen flags (`-flag`). To fix this, we need to modify the `PS_ARGUMENTS` rule to include double hyphen flags.

Here's the *SEARCH/REPLACE* edit to fix the issue:

```javascript
### src/languages/powershell.js
<<<<<<< SEARCH
    const PS_ARGUMENTS = {
      variants: [
        // PS literals are pretty verbose so it's a good idea to accent them a bit.
        {
          className: 'operator',
          begin: '('.concat(COMPARISON_OPERATORS, ')\\b')
        },
        {
          className: 'literal',
          begin: /(-)[\w\d]+/,
          relevance: 0
        }
      ]
    };
=======
    const PS_ARGUMENTS = {
      variants: [
        // PS literals are pretty verbose so it's a good idea to accent them a bit.
        {
          className: 'operator',
          begin: '('.concat(COMPARISON_OPERATORS, ')\\b')
        },
        {
          className: 'literal',
          begin: /(--?)[\w\d]+/,
          relevance: 0
        }
      ]
    };
>>>>>>> REPLACE
```

This change modifies the `begin` regex in the `PS_ARGUMENTS` rule to match both single and double hyphen flags. The updated regex `(--?)[\w\d]+` will now correctly highlight both `-flag` and `--flag` as literals.
