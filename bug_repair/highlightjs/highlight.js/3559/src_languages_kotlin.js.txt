The issue is that the brackets in the class inheritance context are being highlighted with a different color. This is likely due to the way the syntax highlighting rules are defined for the Kotlin language in the code.

To fix this, we need to ensure that the brackets in the class inheritance context are treated the same as other brackets in the code. We can do this by modifying the `KOTLIN_PAREN_TYPE` and `KOTLIN_PAREN_TYPE2` rules to include the class inheritance context.

Here's the SEARCH/REPLACE edit to fix the issue:

```javascript
### src/languages/kotlin.js
<<<<<<< SEARCH
const KOTLIN_PAREN_TYPE = { variants: [
    {
      className: 'type',
      begin: hljs.UNDERSCORE_IDENT_RE
    },
    {
      begin: /\(/,
      end: /\)/,
      contains: [] // defined later
    }
  ] };
  const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
  KOTLIN_PAREN_TYPE2.variants[1].contains = [ KOTLIN_PAREN_TYPE ];
  KOTLIN_PAREN_TYPE.variants[1].contains = [ KOTLIN_PAREN_TYPE2 ];
=======
const KOTLIN_PAREN_TYPE = { variants: [
    {
      className: 'type',
      begin: hljs.UNDERSCORE_IDENT_RE
    },
    {
      begin: /\(/,
      end: /\)/,
      contains: [
        {
          className: 'type',
          begin: hljs.UNDERSCORE_IDENT_RE
        },
        {
          begin: /\(/,
          end: /\)/,
          contains: [ KOTLIN_PAREN_TYPE ]
        }
      ]
    }
  ] };
  const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
  KOTLIN_PAREN_TYPE2.variants[1].contains = [ KOTLIN_PAREN_TYPE ];
  KOTLIN_PAREN_TYPE.variants[1].contains = [ KOTLIN_PAREN_TYPE2 ];
>>>>>>> REPLACE
```

This edit modifies the `KOTLIN_PAREN_TYPE` and `KOTLIN_PAREN_TYPE2` rules to include the class inheritance context, ensuring that the brackets in the class inheritance context are treated the same as other brackets in the code.
