The issue described is related to the context menu not appearing when dragging a sprite, and instead, the OS's context menu appears. This suggests that the drag recognizer might be interfering with the context menu event. The `_handleMove` function in the `DragRecognizer` class is responsible for handling drag events, and it might be preventing the context menu from appearing.

To fix this, we need to ensure that the drag recognizer does not interfere with the context menu event when the user is not actively dragging. We can achieve this by adding a check to see if the drag has started before preventing the default behavior.

Here is the proposed fix:

```javascript
### src/lib/drag-recognizer.js
<<<<<<< SEARCH
    _handleMove (event) {
        // For gestures identified as vertical scrolls, do not process movement events
        if (this._isScroll()) return;

        const currentOffset = getEventXY(event);

        // Try to identify this gesture if it hasn't been identified already
        if (!this.gestureInProgress()) {
            const dx = currentOffset.x - this._initialOffset.x;
            const dy = currentOffset.y - this._initialOffset.y;
            const dragDistance = Math.sqrt((dx * dx) + (dy * dy));
            if (dragDistance < this._distanceThreshold) return;

            // For touch moves, additionally check if the angle suggests drag vs. scroll
            if (event.type === 'touchmove') {
                // Direction goes from -180 to 180, with 0 toward the right.
                let angle = Math.atan2(dy, dx) / Math.PI * 180;
                // Fold over horizontal axis, range now 0 to 180
                angle = Math.abs(angle);
                // Fold over vertical axis, range now 0 to 90
                if (angle > 90) angle = 180 - angle;
                if (angle > this._touchDragAngle) {
                    this._gestureState = DragRecognizer.STATE_SCROLL;
                } else {
                    this._gestureState = DragRecognizer.STATE_DRAG;
                }
            } else {
                // Mouse moves are always considered drags
                this._gestureState = DragRecognizer.STATE_DRAG;
            }
        }

        if (this._isDrag()) {
            this._onDrag(currentOffset, this._initialOffset);
            event.preventDefault();
        }
    }
=======
    _handleMove (event) {
        // For gestures identified as vertical scrolls, do not process movement events
        if (this._isScroll()) return;

        const currentOffset = getEventXY(event);

        // Try to identify this gesture if it hasn't been identified already
        if (!this.gestureInProgress()) {
            const dx = currentOffset.x - this._initialOffset.x;
            const dy = currentOffset.y - this._initialOffset.y;
            const dragDistance = Math.sqrt((dx * dx) + (dy * dy));
            if (dragDistance < this._distanceThreshold) return;

            // For touch moves, additionally check if the angle suggests drag vs. scroll
            if (event.type === 'touchmove') {
                // Direction goes from -180 to 180, with 0 toward the right.
                let angle = Math.atan2(dy, dx) / Math.PI * 180;
                // Fold over horizontal axis, range now 0 to 180
                angle = Math.abs(angle);
                // Fold over vertical axis, range now 0 to 90
                if (angle > 90) angle = 180 - angle;
                if (angle > this._touchDragAngle) {
                    this._gestureState = DragRecognizer.STATE_SCROLL;
                } else {
                    this._gestureState = DragRecognizer.STATE_DRAG;
                }
            } else {
                // Mouse moves are always considered drags
                this._gestureState = DragRecognizer.STATE_DRAG;
            }
        }

        if (this._isDrag()) {
            this._onDrag(currentOffset, this._initialOffset);
            // Only prevent default if the drag has started
            if (this._gestureState === DragRecognizer.STATE_DRAG) {
                event.preventDefault();
            }
        }
    }
>>>>>>> REPLACE
```
