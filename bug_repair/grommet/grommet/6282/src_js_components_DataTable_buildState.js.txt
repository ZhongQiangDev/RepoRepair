The issue is that the sorting function does not handle `null` or `undefined` values correctly. To fix this, we need to treat `null` or `undefined` values as empty strings (`''`) during the sorting process.

Here's the *SEARCH/REPLACE* edit to fix the issue:

```javascript
### src/js/components/DataTable/buildState.js
<<<<<<< SEARCH
result.sort((d1, d2) => {
  const d1Val = datumValue(d1, property);
  const d2Val = datumValue(d2, property);
  if (typeof d1Val === 'string' && typeof d2Val === 'string') {
    const sortResult = d1Val.localeCompare(d2Val, undefined, {
      sensitivity: 'base',
    });
    return sortAsc ? sortResult : -sortResult;
  }
  if (d1Val > d2Val) return before;
  if (d1Val < d2Val) return after;
  return 0;
});
=======
result.sort((d1, d2) => {
  const d1Val = datumValue(d1, property) ?? '';
  const d2Val = datumValue(d2, property) ?? '';
  if (typeof d1Val === 'string' && typeof d2Val === 'string') {
    const sortResult = d1Val.localeCompare(d2Val, undefined, {
      sensitivity: 'base',
    });
    return sortAsc ? sortResult : -sortResult;
  }
  if (d1Val > d2Val) return before;
  if (d1Val < d2Val) return after;
  return 0;
});
>>>>>>> REPLACE
```

This edit uses the nullish coalescing operator (`??`) to replace `null` or `undefined` values with an empty string (`''`) before performing the comparison. This ensures that the sorting function treats `null` or `undefined` values as empty strings, as expected.
