The issue is that when `onOrder` is used in conjunction with `action`, the alignment of the action buttons is not correct. The problem seems to be related to how the `boxProps` are being set when both `onOrder` and `action` are present.

To fix this, we need to ensure that the `boxProps` are set correctly to align the action buttons properly when `onOrder` is used.

Here's the proposed fix:

```javascript
### src/js/components/List/List.js
<<<<<<< SEARCH
                if (action) {
                  content = [
                    <Box align="start" key={`actionContainer${index}`}>
                      {content}
                    </Box>,
                    action(item, index),
                  ];
                  boxProps = {
                    direction: 'row',
                    align: secondaryKey ? 'start' : 'center',
                    justify: 'between',
                    gap: 'medium',
                  };
                }
=======
                if (action) {
                  content = [
                    <Box align="start" key={`actionContainer${index}`}>
                      {content}
                    </Box>,
                    action(item, index),
                  ];
                  boxProps = {
                    direction: 'row',
                    align: secondaryKey ? 'start' : 'center',
                    justify: 'between',
                    gap: 'medium',
                  };

                  // Ensure proper alignment when onOrder is used
                  if (onOrder) {
                    boxProps = {
                      ...boxProps,
                      justify: 'space-between',
                    };
                  }
                }
>>>>>>> REPLACE
```

This change ensures that when both `onOrder` and `action` are used, the `boxProps` are set to `justify: 'space-between'` to properly align the action buttons.
