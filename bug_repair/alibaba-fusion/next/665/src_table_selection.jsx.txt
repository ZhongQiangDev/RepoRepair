The issue described is about customizing the content of the selection cell in the header of a table. The current implementation of `renderSelectionHeader` and `renderSelectionBody` methods in the `SelectionTable` component does not allow for custom content in the selection cell. To address this, we need to modify the `renderSelectionHeader` method to accept a custom component or function for rendering the header cell content.

Here's the proposed fix:

```javascript
### src/table/selection.jsx
<<<<<<< SEARCH
        renderSelectionHeader = () => {
            const onChange = this.selectAllRow,
                attrs = {},
                {
                    rowSelection,
                    primaryKey,
                    dataSource,
                    entireDataSource,
                    locale,
                } = this.props,
                { selectedRowKeys } = this.state,
                mode = rowSelection.mode ? rowSelection.mode : 'multiple';

            let checked = !!selectedRowKeys.length;
            let indeterminate = false;

            const source = entireDataSource || dataSource;

            this.flatDataSource(source)
                .filter((record, index) => {
                    if (!rowSelection.getProps) {
                        return true;
                    } else {
                        return !(rowSelection.getProps(record, index) || {})
                            .disabled;
                    }
                })
                .map(record => record[primaryKey])
                .forEach(id => {
                    if (selectedRowKeys.indexOf(id) === -1) {
                        checked = false;
                    } else {
                        indeterminate = true;
                    }
                });
            attrs.onClick = makeChain(e => {
                e.stopPropagation();
            }, attrs.onClick);

            if (checked) {
                indeterminate = false;
            }
            return mode === 'multiple' ? (
                <Checkbox
                    indeterminate={indeterminate}
                    aria-label={locale.selectAll}
                    checked={checked}
                    onChange={onChange}
                    {...attrs}
                />
            ) : null;
        };
=======
        renderSelectionHeader = () => {
            const {
                rowSelection,
                primaryKey,
                dataSource,
                entireDataSource,
                locale,
            } = this.props;
            const { selectedRowKeys } = this.state;
            const mode = rowSelection.mode ? rowSelection.mode : 'multiple';

            let checked = !!selectedRowKeys.length;
            let indeterminate = false;

            const source = entireDataSource || dataSource;

            this.flatDataSource(source)
                .filter((record, index) => {
                    if (!rowSelection.getProps) {
                        return true;
                    } else {
                        return !(rowSelection.getProps(record, index) || {})
                            .disabled;
                    }
                })
                .map(record => record[primaryKey])
                .forEach(id => {
                    if (selectedRowKeys.indexOf(id) === -1) {
                        checked = false;
                    } else {
                        indeterminate = true;
                    }
                });

            if (rowSelection.headerCell) {
                return rowSelection.headerCell({
                    checked,
                    indeterminate,
                    onSelectAll: this.selectAllRow,
                    mode,
                });
            }

            return mode === 'multiple' ? (
                <Checkbox
                    indeterminate={indeterminate}
                    aria-label={locale.selectAll}
                    checked={checked}
                    onChange={this.selectAllRow}
                />
            ) : null;
        };
>>>>>>> REPLACE
```

This change allows the `rowSelection` prop to include a `headerCell` function or component that can be used to customize the content of the selection cell in the header. If `headerCell` is provided, it will be used to render the header cell content; otherwise, the default checkbox will be rendered.
