The issue described is that the `CascaderSelect` component is modifying the properties of the objects passed in as `dataSource`, which can cause issues when using libraries like Immer that expect objects to be immutable.

The problematic code is in the `flatDataSource` function, where it directly modifies the `item.value` property:

```javascript
item.value = newValue;
```

To fix this, we should create a new object instead of modifying the existing one. Here's the fix:

```javascript
### src/cascader/cascader.jsx
<<<<<<< SEARCH
const flatDataSource = (data, prefix = '0', v2n = {}, p2n = {}) => {
    data.forEach((item, index) => {
        const { value, children } = item;
        const pos = `${prefix}-${index}`;
        const newValue = String(value);
        item.value = newValue;
        v2n[newValue] = p2n[pos] = {
            ...item,
            pos,
            _source: item,
        };

        if (children && children.length) {
            flatDataSource(children, pos, v2n, p2n);
        }
    });

    return { v2n, p2n };
};
=======
const flatDataSource = (data, prefix = '0', v2n = {}, p2n = {}) => {
    data.forEach((item, index) => {
        const { value, children, ...rest } = item;
        const pos = `${prefix}-${index}`;
        const newValue = String(value);
        const newItem = {
            ...rest,
            value: newValue,
            pos,
            _source: item,
        };

        v2n[newValue] = p2n[pos] = newItem;

        if (children && children.length) {
            flatDataSource(children, pos, v2n, p2n);
        }
    });

    return { v2n, p2n };
};
>>>>>>> REPLACE
```

This change ensures that the original `item` object is not modified, and a new object `newItem` is created with the updated `value` property. This should resolve the issue with Immer and prevent the error from occurring.
