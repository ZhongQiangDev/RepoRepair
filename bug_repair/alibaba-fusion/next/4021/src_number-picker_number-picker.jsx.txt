The issue described is that the `NumberPicker` component allows users to input values beyond the specified maximum value, even though the component visually restricts the increment/decrement buttons. The problem is that the `onChange` event does not prevent the user from entering values outside the allowed range directly into the input field.

To fix this, we need to ensure that the `onChange` event handler correctly validates the input value against the `max` and `min` boundaries and corrects it if necessary.

Here's the required `SEARCH/REPLACE` edit:

```javascript
### src/number-picker/number-picker.jsx
<<<<<<< SEARCH
    onChange(value, e) {
        // ignore space & Compatible Chinese Input Method
        value = value.replace('。', '.').trim();
        let onlyDisplay = false;
        if (this.props.editable === true && this.shouldFireOnChange(value)) {
            let valueCorrected = this.correctValue(value);
            if (this.state.value !== valueCorrected) {
                this.setValue({ value: valueCorrected, e });
            }
        } else {
            onlyDisplay = true;
        }

        // 【不应支持】如果输入为满足精度要求的纯数字，底层input.value设置为数字类型而非string
        // if (`${valueCorrected}` === value) value = valueCorrected;

        this.setDisplayValue({ displayValue: value, onlyDisplay });
    }
=======
    onChange(value, e) {
        // ignore space & Compatible Chinese Input Method
        value = value.replace('。', '.').trim();
        let onlyDisplay = false;
        if (this.props.editable === true) {
            let valueCorrected = this.correctValue(value);
            if (this.state.value !== valueCorrected) {
                this.setValue({ value: valueCorrected, e });
            }
            value = valueCorrected;
        } else {
            onlyDisplay = true;
        }

        // 【不应支持】如果输入为满足精度要求的纯数字，底层input.value设置为数字类型而非string
        // if (`${valueCorrected}` === value) value = valueCorrected;

        this.setDisplayValue({ displayValue: value, onlyDisplay });
    }
>>>>>>> REPLACE
```

This change ensures that the `value` is always corrected to be within the allowed range before setting it as the display value. This prevents the user from entering values outside the specified range directly into the input field.
