The issue is that when using the `itemRender` prop, the delete functionality is not being passed through. The `itemRender` function is being used to customize the rendering of each item in the list, but it doesn't include the delete button.

To fix this, we need to ensure that the delete button is included when `itemRender` is used. We can do this by modifying the `getPictureCardList` method to include the delete button when `itemRender` is used.

```typescript
### src/upload/list.jsx
<<<<<<< SEARCH
if (typeof itemRender === 'function') {
    item = itemRender(file);
} else {
    item = [
        <div className={`${prefixCls}-list-item-thumbnail`} key="img">
            {img}
        </div>,
        <span
            key="tool"
            className={`${prefixCls}-tool ${!this.props.closable ? `${prefixCls}-noclose` : ''}`}
        >
            <a
                href={downloadURL}
                target="_blank"
                tabIndex={downloadURL ? '0' : '-1'}
                className={`${prefixCls}-tool-download-link`}
                style={{
                    pointerEvents: downloadURL ? '' : 'none',
                }}
            >
                <Icon
                    type={downloadURL ? 'download' : ''}
                    aria-label={locale.card.download}
                    className={`${prefixCls}-tool-download-icon`}
                />
            </a>

            {this.props.closable && !isPreview ? (
                <span className={`${prefixCls}-tool-close`}>
                    <Icon
                        type="ashbin"
                        aria-label={locale.card.delete}
                        tabIndex="0"
                        role="button"
                        onClick={onClose}
                        onKeyDown={onKeyDownClose}
                    />
                </span>
            ) : null}
        </span>,
    ];
}
=======
if (typeof itemRender === 'function') {
    item = [
        itemRender(file),
        <span
            key="tool"
            className={`${prefixCls}-tool ${!this.props.closable ? `${prefixCls}-noclose` : ''}`}
        >
            <a
                href={downloadURL}
                target="_blank"
                tabIndex={downloadURL ? '0' : '-1'}
                className={`${prefixCls}-tool-download-link`}
                style={{
                    pointerEvents: downloadURL ? '' : 'none',
                }}
            >
                <Icon
                    type={downloadURL ? 'download' : ''}
                    aria-label={locale.card.download}
                    className={`${prefixCls}-tool-download-icon`}
                />
            </a>

            {this.props.closable && !isPreview ? (
                <span className={`${prefixCls}-tool-close`}>
                    <Icon
                        type="ashbin"
                        aria-label={locale.card.delete}
                        tabIndex="0"
                        role="button"
                        onClick={onClose}
                        onKeyDown={onKeyDownClose}
                    />
                </span>
            ) : null}
        </span>,
    ];
} else {
    item = [
        <div className={`${prefixCls}-list-item-thumbnail`} key="img">
            {img}
        </div>,
        <span
            key="tool"
            className={`${prefixCls}-tool ${!this.props.closable ? `${prefixCls}-noclose` : ''}`}
        >
            <a
                href={downloadURL}
                target="_blank"
                tabIndex={downloadURL ? '0' : '-1'}
                className={`${prefixCls}-tool-download-link`}
                style={{
                    pointerEvents: downloadURL ? '' : 'none',
                }}
            >
                <Icon
                    type={downloadURL ? 'download' : ''}
                    aria-label={locale.card.download}
                    className={`${prefixCls}-tool-download-icon`}
                />
            </a>

            {this.props.closable && !isPreview ? (
                <span className={`${prefixCls}-tool-close`}>
                    <Icon
                        type="ashbin"
                        aria-label={locale.card.delete}
                        tabIndex="0"
                        role="button"
                        onClick={onClose}
                        onKeyDown={onKeyDownClose}
                    />
                </span>
            ) : null}
        </span>,
    ];
}
>>>>>>> REPLACE
```

This change ensures that when `itemRender` is used, the delete button is still included in the rendered item.
