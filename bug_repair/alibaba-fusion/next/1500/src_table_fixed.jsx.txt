The issue described is related to the abnormal display of the header filter items when using `fixedHeader` and `resizable` together in the table component. The problem seems to be related to the sizing and positioning of the header when the table is both fixed and resizable.

To address this, we need to ensure that the header's dimensions are correctly adjusted when the table is resized. The `adjustFixedHeaderSize` method in the `fixed.jsx` file is responsible for adjusting the header size, but it may not be handling the resizing correctly when `resizable` is enabled.

Here's a potential fix:

```javascript
### src/table/fixed.jsx
<<<<<<< SEARCH
        adjustFixedHeaderSize() {
            const { hasHeader, rtl } = this.props;
            const paddingName = rtl ? 'paddingLeft' : 'paddingRight';
            const marginName = rtl ? 'marginLeft' : 'marginRight';
            const body = this.bodyNode;

            if (hasHeader && !this.props.lockType && body) {
                const scrollBarSize = dom.scrollbar().width;
                const hasVerScroll = body.scrollHeight > body.clientHeight,
                    hasHozScroll = body.scrollWidth > body.clientWidth;
                const style = {
                    [paddingName]: scrollBarSize,
                    [marginName]: scrollBarSize,
                };

                if (!hasVerScroll || !+scrollBarSize) {
                    style[paddingName] = 0;
                    style[marginName] = 0;
                }

                if (+scrollBarSize) {
                    style.marginBottom = -scrollBarSize;
                    if (hasHozScroll) {
                        style.paddingBottom = 0;
                    } else {
                        style.paddingBottom = scrollBarSize;
                        style[marginName] = 0;
                    }
                }

                dom.setStyle(this.headerNode, style);
            }
        }
=======
        adjustFixedHeaderSize() {
            const { hasHeader, rtl, resizable } = this.props;
            const paddingName = rtl ? 'paddingLeft' : 'paddingRight';
            const marginName = rtl ? 'marginLeft' : 'marginRight';
            const body = this.bodyNode;

            if (hasHeader && !this.props.lockType && body) {
                const scrollBarSize = dom.scrollbar().width;
                const hasVerScroll = body.scrollHeight > body.clientHeight,
                    hasHozScroll = body.scrollWidth > body.clientWidth;
                const style = {
                    [paddingName]: scrollBarSize,
                    [marginName]: scrollBarSize,
                };

                if (!hasVerScroll || !+scrollBarSize) {
                    style[paddingName] = 0;
                    style[marginName] = 0;
                }

                if (+scrollBarSize) {
                    style.marginBottom = -scrollBarSize;
                    if (hasHozScroll) {
                        style.paddingBottom = 0;
                    } else {
                        style.paddingBottom = scrollBarSize;
                        style[marginName] = 0;
                    }
                }

                // Adjust header size when resizable is enabled
                if (resizable) {
                    const headerWidth = this.headerNode.offsetWidth;
                    const bodyWidth = body.offsetWidth;
                    if (headerWidth !== bodyWidth) {
                        this.headerNode.style.width = `${bodyWidth}px`;
                    }
                }

                dom.setStyle(this.headerNode, style);
            }
        }
>>>>>>> REPLACE
```

This fix introduces a check for the `resizable` prop and adjusts the header's width to match the body's width when resizing is enabled. This should help ensure that the header displays correctly when both `fixedHeader` and `resizable` are used together.
