The issue described in the bug report is related to the LTTB (Largest Triangle Three Buckets) decimation algorithm, where the algorithm fails under certain conditions related to screen scaling and odd widths. The error occurs because the `avgRangeLength` can become negative, and `rangeTo` can exceed the length of the data array, leading to an "undefined" error when trying to access properties of an undefined object.

To fix this, we need to ensure that the indices used in the loop do not exceed the bounds of the data array and that `avgRangeLength` is always positive. Here's the proposed fix:

```javascript
### src/plugins/plugin.decimation.js
<<<<<<< SEARCH
const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
const avgRangeLength = avgRangeEnd - avgRangeStart;

for (j = avgRangeStart; j < avgRangeEnd; j++) {
   avgX += data[j].x;
   avgY += data[j].y;
}

avgX /= avgRangeLength;
avgY /= avgRangeLength;

// Adding offset
const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
const rangeTo = Math.floor((i + 1) * bucketWidth) + 1 + start;
const {x: pointAx, y: pointAy} = data[a];
=======
const avgRangeStart = Math.max(Math.floor((i + 1) * bucketWidth) + 1 + start, start);
const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1 + start, endIndex + 1);
const avgRangeLength = Math.max(avgRangeEnd - avgRangeStart, 1);

for (let j = avgRangeStart; j < avgRangeEnd && j < endIndex + 1; j++) {
   avgX += data[j].x;
   avgY += data[j].y;
}

avgX /= avgRangeLength;
avgY /= avgRangeLength;

// Adding offset
const rangeOffs = Math.max(Math.floor(i * bucketWidth) + 1 + start, start);
const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1 + start, endIndex + 1);
const {x: pointAx, y: pointAy} = data[a];
>>>>>>> REPLACE
```

This fix ensures that `avgRangeStart` and `avgRangeEnd` are within the bounds of the data array, and `avgRangeLength` is always at least 1 to avoid division by zero. Additionally, the loop conditions are adjusted to prevent accessing indices outside the data array.
