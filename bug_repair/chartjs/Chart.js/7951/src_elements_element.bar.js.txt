```javascript
### src/elements/element.bar.js
<<<<<<< SEARCH
function boundingRects(bar) {
	const bounds = getBarBounds(bar);
	const width = bounds.right - bounds.left;
	const height = bounds.bottom - bounds.top;
	const border = parseBorderWidth(bar, width / 2, height / 2);

	return {
		outer: {
			x: bounds.left,
			y: bounds.top,
			w: width,
			h: height
		},
		inner: {
			x: bounds.left + border.l,
			y: bounds.top + border.t,
			w: width - border.l - border.r,
			h: height - border.t - border.b
		}
	};
}
=======
function boundingRects(bar) {
	const bounds = getBarBounds(bar);
	const width = bounds.right - bounds.left;
	const height = bounds.bottom - bounds.top;
	const border = parseBorderWidth(bar, width / 2, height / 2);
	const borderRadius = parseBorderRadius(bar, width / 2, height / 2);

	return {
		outer: {
			x: bounds.left,
			y: bounds.top,
			w: width,
			h: height
		},
		inner: {
			x: bounds.left + border.l,
			y: bounds.top + border.t,
			w: width - border.l - border.r,
			h: height - border.t - border.b
		},
		borderRadius: borderRadius
	};
}
function parseBorderRadius(bar, width, height) {
	const options = bar.options;
	const borderRadius = options.borderRadius || 0;
	return {
		tl: borderRadius,
		tr: borderRadius,
		br: borderRadius,
		bl: borderRadius
	};
}
function drawRoundedRect(ctx, rect, borderRadius) {
	ctx.beginPath();
	ctx.moveTo(rect.x + borderRadius.tl, rect.y);
	ctx.lineTo(rect.x + rect.w - borderRadius.tr, rect.y);
	ctx.quadraticCurveTo(rect.x + rect.w, rect.y, rect.x + rect.w, rect.y + borderRadius.tr);
	ctx.lineTo(rect.x + rect.w, rect.y + rect.h - borderRadius.br);
	ctx.quadraticCurveTo(rect.x + rect.w, rect.y + rect.h, rect.x + rect.w - borderRadius.br, rect.y + rect.h);
	ctx.lineTo(rect.x + borderRadius.bl, rect.y + rect.h);
	ctx.quadraticCurveTo(rect.x, rect.y + rect.h, rect.x, rect.y + rect.h - borderRadius.bl);
	ctx.lineTo(rect.x, rect.y + borderRadius.tl);
	ctx.quadraticCurveTo(rect.x, rect.y, rect.x + borderRadius.tl, rect.y);
	ctx.closePath();
}
BarElement.prototype.draw = function(ctx) {
	const options = this.options;
	const {inner, outer, borderRadius} = boundingRects(this);

	ctx.save();

	if (outer.w !== inner.w || outer.h !== inner.h) {
		drawRoundedRect(ctx, outer, borderRadius);
		ctx.clip();
		drawRoundedRect(ctx, inner, borderRadius);
		ctx.fillStyle = options.borderColor;
		ctx.fill('evenodd');
	}

	ctx.fillStyle = options.backgroundColor;
	drawRoundedRect(ctx, inner, borderRadius);
	ctx.fill();

	ctx.restore();
}
>>>>>>> REPLACE
```
