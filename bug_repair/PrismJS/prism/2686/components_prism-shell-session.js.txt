The issue seems to be related to the regex pattern used for the `command` token in the `shell-session` language definition. The pattern is not correctly matching the shell session commands, leading to improper tokenization.

The problematic part appears to be the pattern for the `command` token, which is not correctly capturing the shell commands and their output. Specifically, the pattern is not correctly handling the shell commands and their output separately.

To fix this, we need to adjust the regex pattern for the `command` token to correctly match the shell commands and their output. We can do this by modifying the pattern to correctly capture the shell commands and their output separately.

Here is the proposed fix:

```javascript
###components/prism-shell-session.js
<<<<<<< SEARCH
		'command': {
			pattern: RegExp(/^(?:[^\s@:$#*!/\\]+@[^\s@:$#*!/\\]+(?::[^\0-\x1F$#*?"<>:;|]+)?)?[$#](?:[^\\\r\n'"<]|\\.|<<str>>)+/.source.replace(/<<str>>/g, function () { return strings; }), 'm'),
			greedy: true,
			inside: {
				'info': {
					// foo@bar:~/files$ exit
					// foo@bar$ exit
					pattern: /^[^#$]+/,
					alias: 'punctuation',
					inside: {
						'path': {
							pattern: /(:)[\s\S]+/,
							lookbehind: true
						},
						'user': /^[^:]+/,
						'punctuation': /:/
					}
				},
				'bash': {
					pattern: /(^[$#]\s*)\S[\s\S]*/,
					lookbehind: true,
					alias: 'language-bash',
					inside: Prism.languages.bash
				},
				'shell-symbol': {
					pattern: /^[$#]/,
					alias: 'important'
				}
			}
		},
=======
		'command': {
			pattern: RegExp(/^(?:[^\s@:$#*!/\\]+@[^\s@:$#*!/\\]+(?::[^\0-\x1F$#*?"<>:;|]+)?)?[$#](?:[^\\\r\n'"<]|\\.|<<str>>)+/.source.replace(/<<str>>/g, function () { return strings; }), 'm'),
			greedy: true,
			inside: {
				'info': {
					pattern: /^[^#$]+/,
					alias: 'punctuation',
					inside: {
						'path': {
							pattern: /(:)[\s\S]+/,
							lookbehind: true
						},
						'user': /^[^:]+/,
						'punctuation': /:/
					}
				},
				'bash': {
					pattern: /(^[$#]\s*)\S[\s\S]*/,
					lookbehind: true,
					alias: 'language-bash',
					inside: Prism.languages.bash
				},
				'shell-symbol': {
					pattern: /^[$#]/,
					alias: 'important'
				}
			}
		},
		'output': {
			pattern: /(?<=\n)[^\n]+/,
			alias: 'string'
		}
>>>>>>> REPLACE
```

This fix introduces a new `output` token to correctly capture the shell command output. The `output` token uses a lookbehind assertion to match lines that follow a newline character, which should correctly capture the shell command output. This should resolve the issue with the shell session tokenizer not working correctly.
