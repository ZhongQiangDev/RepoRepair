To address the issue where attributions from a visible layer within an invisible group layer are displayed in the info popup, we need to ensure that the attributions are only displayed when the group layer is visible. This can be achieved by modifying the logic that determines whether to display the attributions.

Here's the proposed fix:

```javascript
### src/ol/source/TileWMS.js
<<<<<<< SEARCH
  attributions: options.attributions,
=======
  attributions: options.groupLayerVisible ? options.attributions : null,
>>>>>>> REPLACE
```

However, since the `TileWMS` class does not have direct access to the visibility state of the group layer, we need to handle this at the layer level where the visibility state is known. Here's how you can modify the layer creation code:

```javascript
### src/your-layer-file.js
<<<<<<< SEARCH
export const t_sezon_budynki = new TileLayer({
  source: tSource,
  visible: localStorage.getItem("budynki sezon-vi") ? JSON.parse(localStorage.getItem("budynki sezon-vi")) : true,
  opacity: localStorage.getItem("budynki sezon-op") ? JSON.parse(localStorage.getItem("budynki sezon-op")) : 1,
  title: "budynki sezon"
});
=======
export const t_sezon_budynki = new TileLayer({
  source: tSource,
  visible: localStorage.getItem("budynki sezon-vi") ? JSON.parse(localStorage.getItem("budynki sezon-vi")) : true,
  opacity: localStorage.getItem("budynki sezon-op") ? JSON.parse(localStorage.getItem("budynki sezon-op")) : 1,
  title: "budynki sezon",
  attributions: localStorage.getItem("budynki sezon-vi") ? tSource.attributions : null
});
>>>>>>> REPLACE
```

This modification ensures that the attributions are only set when the layer is visible. If the layer is not visible, the attributions will be set to `null`, preventing them from being displayed in the info popup.

Additionally, if you want to handle this dynamically based on the visibility state of the group layer, you can add a function to update the attributions whenever the visibility of the group layer changes:

```javascript
### src/your-layer-file.js
<<<<<<< SEARCH
export const t_sezon_budynki = new TileLayer({
  source: tSource,
  visible: localStorage.getItem("budynki sezon-vi") ? JSON.parse(localStorage.getItem("budynki sezon-vi")) : true,
  opacity: localStorage.getItem("budynki sezon-op") ? JSON.parse(localStorage.getItem("budynki sezon-op")) : 1,
  title: "budynki sezon"
});
=======
export const t_sezon_budynki = new TileLayer({
  source: tSource,
  visible: localStorage.getItem("budynki sezon-vi") ? JSON.parse(localStorage.getItem("budynki sezon-vi")) : true,
  opacity: localStorage.getItem("budynki sezon-op") ? JSON.parse(localStorage.getItem("budynki sezon-op")) : 1,
  title: "budynki sezon"
});

function updateAttributions(groupLayerVisible) {
  t_sezon_budynki.setAttributions(groupLayerVisible ? tSource.attributions : null);
}

// Call this function whenever the visibility of the group layer changes
updateAttributions(localStorage.getItem("budynki sezon-vi") ? JSON.parse(localStorage.getItem("budynki sezon-vi")) : true);
>>>>>>> REPLACE
```

This ensures that the attributions are updated dynamically based on the visibility state of the group layer.
