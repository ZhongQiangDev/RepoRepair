```javascript
### src/ol/layer/WebGlTile.js
<<<<<<< SEARCH
/**
 * @classdesc
 * WebGL tile layer.
 *
 * @api
 */
class WebGlTile extends WebGLTileLayer {
  /**
   * @param {import("./Layer.js").LayerOptions} options Layer options.
   */
  constructor(options) {
    super(options);
  }
}
=======
/**
 * @classdesc
 * WebGL tile layer.
 *
 * @api
 */
class WebGlTile extends WebGLTileLayer {
  /**
   * @param {import("./Layer.js").LayerOptions} options Layer options.
   */
  constructor(options) {
    super(options);
  }

  /**
   * @inheritDoc
   */
  setVisible(visible) {
    super.setVisible(visible);
    if (this.getMap()) {
      this.getMap().render();
    }
  }
}
>>>>>>> REPLACE
```

```javascript
### src/ol/layer/Group.js
<<<<<<< SEARCH
  /**
   * @param {Array<import("./Layer.js").State>} [opt_states] Optional list
   * of layer states (to be modified in place).
   * @return {Array<import("./Layer.js").State>} List of layer states.
   */
  getLayerStatesArray(opt_states) {
    const states = opt_states !== undefined ? opt_states : [];
    const pos = states.length;

    this.getLayers().forEach(function (layer) {
      layer.getLayerStatesArray(states);
    });
=======
  /**
   * @param {Array<import("./Layer.js").State>} [opt_states] Optional list
   * of layer states (to be modified in place).
   * @return {Array<import("./Layer.js").State>} List of layer states.
   */
  getLayerStatesArray(opt_states) {
    const states = opt_states !== undefined ? opt_states : [];
    const pos = states.length;

    this.getLayers().forEach(function (layer) {
      layer.getLayerStatesArray(states);
    });

    const ownLayerState = this.getLayerState();
    for (let i = pos, ii = states.length; i < ii; i++) {
      const layerState = states[i];
      layerState.visible = layerState.visible && ownLayerState.visible;
    }
>>>>>>> REPLACE
```
