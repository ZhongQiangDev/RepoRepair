```javascript
### src/ol/renderer/webgl/TileLayer.js
<<<<<<< SEARCH
function getCacheKey(source, tileCoord) {
  return `${source.getKey()},${getTileCoordKey(tileCoord)}`;
}
=======
function getCacheKey(source, tileCoord) {
  return `${source.getKey()}-${getTileCoordKey(tileCoord)}`;
}
>>>>>>> REPLACE
```

```javascript
### src/ol/renderer/webgl/TileLayer.js
<<<<<<< SEARCH
if (tileTextureCache.containsKey(cacheKey)) {
  tileTexture = tileTextureCache.get(cacheKey);
  tile = tileTexture.tile;
}
if (!tileTexture || tileTexture.tile.key !== tileSource.getKey()) {
  tile = tileSource.getTile(
    z,
    x,
    y,
    frameState.pixelRatio,
    viewState.projection
  );
  if (!tileTexture) {
    tileTexture = new TileTexture({
      tile: tile,
      grid: tileGrid,
      helper: this.helper,
      gutter: gutter,
    });
    tileTextureCache.set(cacheKey, tileTexture);
  } else {
    if (this.isDrawableTile_(tile)) {
      tileTexture.setTile(tile);
    } else {
      const interimTile =
        /** @type {import("../../webgl/TileTexture").TileType} */ (
          tile.getInterimTile()
        );
      tileTexture.setTile(interimTile);
    }
  }
}
=======
if (tileTextureCache.containsKey(cacheKey)) {
  tileTexture = tileTextureCache.get(cacheKey);
  tile = tileTexture.tile;
  if (tileTexture.tile.key !== tileSource.getKey()) {
    tileTextureCache.remove(cacheKey);
    tileTexture = null;
  }
}
if (!tileTexture) {
  tile = tileSource.getTile(
    z,
    x,
    y,
    frameState.pixelRatio,
    viewState.projection
  );
  tileTexture = new TileTexture({
    tile: tile,
    grid: tileGrid,
    helper: this.helper,
    gutter: gutter,
  });
  tileTextureCache.set(cacheKey, tileTexture);
} else {
  if (this.isDrawableTile_(tile)) {
    tileTexture.setTile(tile);
  } else {
    const interimTile =
      /** @type {import("../../webgl/TileTexture").TileType} */ (
        tile.getInterimTile()
      );
    tileTexture.setTile(interimTile);
  }
}
>>>>>>> REPLACE
```

```javascript
### src/ol/renderer/webgl/TileLayer.js
<<<<<<< SEARCH
const postRenderFunction = function (map, frameState) {
  tileSource.updateCacheSize(0.1, frameState.viewState.projection);
  tileSource.expireCache(frameState.viewState.projection, empty);
};
=======
const postRenderFunction = function (map, frameState) {
  tileSource.updateCacheSize(0.1, frameState.viewState.projection);
  tileSource.expireCache(frameState.viewState.projection, empty);
  tileTextureCache.clear();
};
>>>>>>> REPLACE
```
