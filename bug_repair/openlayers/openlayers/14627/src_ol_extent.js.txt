The issue arises because `applyTransform` is being called with an empty extent, which results in `NaN` values when the transformation function is applied. The `fromEPSG4326` function, which is used for the transformation, does not handle `Infinity` values correctly, leading to `NaN` values.

To fix this, we need to ensure that `applyTransform` handles empty extents gracefully by checking if the extent is empty before applying the transformation. If the extent is empty, we should return an empty extent instead of proceeding with the transformation.

Here's the fix:

```javascript
### src/ol/extent.js
<<<<<<< SEARCH
export function applyTransform(extent, transformFn, dest, stops) {
  let coordinates = [];
  if (stops > 1) {
    const width = extent[2] - extent[0];
    const height = extent[3] - extent[1];
    for (let i = 0; i < stops; ++i) {
      coordinates.push(
        extent[0] + (width * i) / stops,
        extent[1],
        extent[2],
        extent[1] + (height * i) / stops,
        extent[2] - (width * i) / stops,
        extent[3],
        extent[0],
        extent[3] - (height * i) / stops
      );
    }
  } else {
    coordinates = [
      extent[0],
      extent[1],
      extent[2],
      extent[1],
      extent[2],
      extent[3],
      extent[0],
      extent[3],
    ];
  }
  transformFn(coordinates, coordinates, 2);
  const xs = [];
  const ys = [];
  for (let i = 0, l = coordinates.length; i < l; i += 2) {
    xs.push(coordinates[i]);
    ys.push(coordinates[i + 1]);
  }
  return _boundingExtentXYs(xs, ys, dest);
}
=======
export function applyTransform(extent, transformFn, dest, stops) {
  // Check if the extent is empty
  if (extent[0] === Infinity && extent[1] === Infinity && extent[2] === -Infinity && extent[3] === -Infinity) {
    return createEmpty();
  }

  let coordinates = [];
  if (stops > 1) {
    const width = extent[2] - extent[0];
    const height = extent[3] - extent[1];
    for (let i = 0; i < stops; ++i) {
      coordinates.push(
        extent[0] + (width * i) / stops,
        extent[1],
        extent[2],
        extent[1] + (height * i) / stops,
        extent[2] - (width * i) / stops,
        extent[3],
        extent[0],
        extent[3] - (height * i) / stops
      );
    }
  } else {
    coordinates = [
      extent[0],
      extent[1],
      extent[2],
      extent[1],
      extent[2],
      extent[3],
      extent[0],
      extent[3],
    ];
  }
  transformFn(coordinates, coordinates, 2);
  const xs = [];
  const ys = [];
  for (let i = 0, l = coordinates.length; i < l; i += 2) {
    xs.push(coordinates[i]);
    ys.push(coordinates[i + 1]);
  }
  return _boundingExtentXYs(xs, ys, dest);
}
>>>>>>> REPLACE
```

This change ensures that if the extent is empty, `applyTransform` will return an empty extent instead of proceeding with the transformation, thus preventing the `NaN` values from being generated.
