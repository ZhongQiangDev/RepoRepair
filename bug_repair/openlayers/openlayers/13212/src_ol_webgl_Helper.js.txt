```javascript
### src/ol/webgl/Helper.js
<<<<<<< SEARCH
/**
 * @param {string} canvasCacheKey The canvas cache key.
 * @return {HTMLCanvasElement} The canvas.
 */
=======
/**
 * @param {string} canvasCacheKey The canvas cache key.
 * @return {HTMLCanvasElement} The canvas.
 */
const getCanvas = (canvasCacheKey) => {
  if (canvasCache[canvasCacheKey]) {
    canvasCache[canvasCacheKey].users++;
    return canvasCache[canvasCacheKey].canvas;
  } else {
    const canvas = document.createElement('canvas');
    canvasCache[canvasCacheKey] = { canvas, users: 1 };
    return canvas;
  }
};

/**
 * @param {string} canvasCacheKey The canvas cache key.
 */
const releaseCanvas = (canvasCacheKey) => {
  if (canvasCache[canvasCacheKey]) {
    canvasCache[canvasCacheKey].users--;
    if (canvasCache[canvasCacheKey].users === 0) {
      delete canvasCache[canvasCacheKey];
    }
  }
};

/**
 * @param {string} key The cache key for the canvas.
 * @return {string} The shared cache key.
 */
const getSharedCanvasCacheKey = (key) => {
  return key;
};

/**
 * @return {string} The unique cache key.
 */
const getUniqueCanvasCacheKey = () => {
  return `uniqueCanvasCacheKey_${uniqueCanvasCacheKeyCount++}`;
};
>>>>>>> REPLACE
```
