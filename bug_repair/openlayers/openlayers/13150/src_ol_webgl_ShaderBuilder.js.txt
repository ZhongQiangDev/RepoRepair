```javascript
### src/ol/layer/Heatmap.js
<<<<<<< SEARCH
  /**
   * @param {import("../source/Vector.js").default} source Source.
   * @param {import("./Layer.js").Options} [options] Layer options.
   */
  constructor(source, options) {
    options = options ? options : {};
    super(source, options);
    this.setOpacity(options.opacity);
  }
=======
  /**
   * @param {import("../source/Vector.js").default} source Source.
   * @param {import("./Layer.js").Options} [options] Layer options.
   */
  constructor(source, options) {
    options = options ? options : {};
    super(source, options);
    this.setOpacity(options.opacity || 1); // Ensure default opacity is set if not provided
  }
>>>>>>> REPLACE
```

```javascript
### src/ol/layer/Heatmap.js
<<<<<<< SEARCH
  /**
   * @inheritDoc
   */
  setOpacity(opacity) {
    this.opacity_ = opacity;
    this.changed();
  }
=======
  /**
   * @inheritDoc
   */
  setOpacity(opacity) {
    this.opacity_ = opacity;
    this.changed();
    if (this.renderer_) {
      this.renderer_.setOpacity(opacity); // Ensure the renderer's opacity is updated
    }
  }
>>>>>>> REPLACE
```

```javascript
### src/ol/renderer/webgl/Heatmap.js
<<<<<<< SEARCH
  /**
   * @inheritDoc
   */
  setOpacity(opacity) {
    this.opacity_ = opacity;
  }
=======
  /**
   * @inheritDoc
   */
  setOpacity(opacity) {
    this.opacity_ = opacity;
    this.updateShaderOpacity(); // Update shader opacity when setOpacity is called
  }

  /**
   * Update the shader opacity based on the current opacity value.
   */
  updateShaderOpacity() {
    const shaderBuilder = this.getShaderBuilder();
    shaderBuilder.setColorExpression(`vec4(${this.opacity_}, ${this.opacity_}, ${this.opacity_}, ${this.opacity_})`);
    this.recompileShader(); // Recompile the shader with the updated opacity
  }
>>>>>>> REPLACE
```
