```javascript
### src/ol/render/canvas/Executor.js
<<<<<<< SEARCH
    if (snapToPixel) {
      x = Math.round(x);
      y = Math.round(y);
    }
=======
    // To prevent jitter during animations, avoid snapping to pixel for animated circles.
    if (snapToPixel && !this.isAnimating_) {
      x = Math.round(x);
      y = Math.round(y);
    }
>>>>>>> REPLACE
```

```javascript
### src/ol/render/canvas/Executor.js
<<<<<<< SEARCH
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} contextScale Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {import("rbush").default} [opt_declutterTree] Declutter tree.
   */
  execute(
    context,
    contextScale,
    transform,
    viewRotation,
    snapToPixel,
    opt_declutterTree
  ) {
=======
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} contextScale Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {import("rbush").default} [opt_declutterTree] Declutter tree.
   */
  execute(
    context,
    contextScale,
    transform,
    viewRotation,
    snapToPixel,
    opt_declutterTree
  ) {
    this.isAnimating_ = false; // Initialize animation state
    // Check if the current operation is part of an animation
    if (this.isAnimationInProgress()) {
      this.isAnimating_ = true;
    }
    this.viewRotation_ = viewRotation;
    this.execute_(
      context,
      contextScale,
      transform,
      this.instructions,
      snapToPixel,
      undefined,
      undefined,
      opt_declutterTree
    );
    this.isAnimating_ = false; // Reset animation state after execution
>>>>>>> REPLACE
```

```javascript
### src/ol/render/canvas/Executor.js
<<<<<<< SEARCH
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} contextScale Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.
   * @param {import("../../extent.js").Extent} [opt_hitExtent] Only check
   *     features that intersect this extent.
   * @return {T|undefined} Callback result.
   * @template T
   */
  executeHitDetection(
    context,
    transform,
    viewRotation,
    opt_featureCallback,
    opt_hitExtent
  ) {
=======
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} contextScale Scale of the context.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {number} viewRotation View rotation.
   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.
   * @param {import("../../extent.js").Extent} [opt_hitExtent] Only check
   *     features that intersect this extent.
   * @return {T|undefined} Callback result.
   * @template T
   */
  executeHitDetection(
    context,
    transform,
    viewRotation,
    opt_featureCallback,
    opt_hitExtent
  ) {
    this.isAnimating_ = false; // Ensure hit detection is not treated as animation
    this.viewRotation_ = viewRotation;
    return this.execute_(
      context,
      1,
      transform,
      this.hitDetectionInstructions,
      true,
      opt_featureCallback,
      opt_hitExtent
    );
>>>>>>> REPLACE
```

```javascript
### src/ol/render/canvas/Executor.js
<<<<<<< SEARCH
  constructor(resolution, pixelRatio, overlaps, instructions) {
=======
  constructor(resolution, pixelRatio, overlaps, instructions) {
    // ... existing constructor code ...
    /**
     * @private
     * @type {boolean}
     */
    this.isAnimating_ = false;
    // ... existing constructor code ...
>>>>>>> REPLACE
```

```javascript
### src/ol/render/canvas/Executor.js
<<<<<<< SEARCH
  /**
   * @private
   * @param {number} sheetWidth Width of the sprite sheet.
   * @param {number} sheetHeight Height of the sprite sheet.
   * @param {number} centerX X.
   * @param {number} centerY Y.
   * @param {number} width Width.
   * @param {number} height Height.
   * @param {number} anchorX Anchor X.
   * @param {number} anchorY Anchor Y.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} rotation Rotation.
   * @param {import("../../size.js").Size} scale Scale.
   * @param {boolean} snapToPixel Snap to pixel.
   * @param {Array<number>} padding Padding.
   * @param {boolean} fillStroke Background fill or stroke.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
   */
  calculateImageOrLabelDimensions_(
    sheetWidth,
    sheetHeight,
    centerX,
    centerY,
    width,
    height,
    anchorX,
    anchorY,
    originX,
    originY,
    rotation,
    scale,
    snapToPixel,
    padding,
    fillStroke,
    feature
  ) {
=======
  /**
   * @private
   * @param {number} sheetWidth Width of the sprite sheet.
   * @param {number} sheetHeight Height of the sprite sheet.
   * @param {number} centerX X.
   * @param {number} centerY Y.
   * @param {number} width Width.
   * @param {number} height Height.
   * @param {number} anchorX Anchor X.
   * @param {number} anchorY Anchor Y.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} rotation Rotation.
   * @param {import("../../size.js").Size} scale Scale.
   * @param {boolean} snapToPixel Snap to pixel.
   * @param {Array<number>} padding Padding.
   * @param {boolean} fillStroke Background fill or stroke.
   * @param {import("../../Feature.js").FeatureLike} feature Feature.
   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
   */
  calculateImageOrLabelDimensions_(
    sheetWidth,
    sheetHeight,
    centerX,
    centerY,
    width,
    height,
    anchorX,
    anchorY,
    originX,
    originY,
    rotation,
    scale,
    snapToPixel,
    padding,
    fillStroke,
    feature
  ) {
    // Override snapToPixel for animations
    if (this.isAnimating_) {
      snapToPixel = false;
    }
    // ... existing function code ...
>>>>>>> REPLACE
```

```javascript
### src/ol/render/canvas/Executor.js
<<<<<<< SEARCH
  /**
   * @private
   * @return {boolean} Whether an animation is in progress.
   */
  isAnimationInProgress() {
    // Placeholder for actual animation check logic
    return false;
  }
=======
  /**
   * @private
   * @return {boolean} Whether an animation is in progress.
   */
  isAnimationInProgress() {
    // Placeholder for actual animation check logic
    return false;
  }
>>>>>>> REPLACE
```
