```javascript
### src/ol/layer/WebGLPointsLayer.js
<<<<<<< SEARCH
import {get as getProjection} from '../proj.js';
import {transform} from '../proj/transform.js';
import WebGLLayer from './WebGL.js';
import WebGLPointsLayerRenderer from './renderer/WebGLPointsLayer.js';

class WebGLPointsLayer extends WebGLLayer {
  constructor(options) {
    super(options);
    this.renderer_ = new WebGLPointsLayerRenderer(this);
  }
}
=======
import {get as getProjection} from '../proj.js';
import {transform} from '../proj/transform.js';
import WebGLLayer from './WebGL.js';
import WebGLPointsLayerRenderer from './renderer/WebGLPointsLayer.js';

class WebGLPointsLayer extends WebGLLayer {
  constructor(options) {
    super(options);
    this.renderer_ = new WebGLPointsLayerRenderer(this);
    this.featureProjection_ = options.featureProjection || 'EPSG:3857';
  }

  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("../proj/Projection.js").default} viewProjection View projection.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  transformFeatureGeometry(feature, geometry, viewProjection) {
    const featureProjection = getProjection(this.featureProjection_);
    if (featureProjection !== viewProjection) {
      return transform(geometry, featureProjection, viewProjection);
    }
    return geometry;
  }
}
>>>>>>> REPLACE
```

```javascript
### src/ol/layer/WebGLPointsLayer.js
<<<<<<< SEARCH
  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("../proj/Projection.js").default} viewProjection View projection.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  transformFeatureGeometry(feature, geometry, viewProjection) {
    return geometry;
  }
=======
  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("../proj/Projection.js").default} viewProjection View projection.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  transformFeatureGeometry(feature, geometry, viewProjection) {
    const featureProjection = getProjection(this.featureProjection_);
    if (featureProjection !== viewProjection) {
      return transform(geometry, featureProjection, viewProjection);
    }
    return geometry;
  }
>>>>>>> REPLACE
```

```javascript
### src/ol/layer/WebGLPointsLayer.js
<<<<<<< SEARCH
  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("../proj/Projection.js").default} viewProjection View projection.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  transformFeatureGeometry(feature, geometry, viewProjection) {
    const featureProjection = getProjection(this.featureProjection_);
    if (featureProjection !== viewProjection) {
      return transform(geometry, featureProjection, viewProjection);
    }
    return geometry;
  }
=======
  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("../proj/Projection.js").default} viewProjection View projection.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  transformFeatureGeometry(feature, geometry, viewProjection) {
    const featureProjection = getProjection(this.featureProjection_);
    if (featureProjection !== viewProjection) {
      return transform(geometry, featureProjection, viewProjection);
    }
    return geometry;
  }
  
  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("../proj/Projection.js").default} viewProjection View projection.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  getFeatureGeometry(feature, geometry, viewProjection) {
    return this.transformFeatureGeometry(feature, geometry, viewProjection);
  }
>>>>>>> REPLACE
```
