```javascript
### src/ol/layer/WebGLTile.js
<<<<<<< SEARCH
  createRenderer() {
    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());

    return new WebGLTileLayerRenderer(this, {
      vertexShader: parsedStyle.vertexShader,
      fragmentShader: parsedStyle.fragmentShader,
      uniforms: parsedStyle.uniforms,
      cacheSize: this.cacheSize_,
      paletteTextures: parsedStyle.paletteTextures,
    });
  }
=======
  createRenderer() {
    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());

    const source = this.getSource();
    const imageSmoothing = source && source.getImageSmoothing !== undefined ? source.getImageSmoothing() : true;

    return new WebGLTileLayerRenderer(this, {
      vertexShader: parsedStyle.vertexShader,
      fragmentShader: parsedStyle.fragmentShader,
      uniforms: parsedStyle.uniforms,
      cacheSize: this.cacheSize_,
      paletteTextures: parsedStyle.paletteTextures,
      imageSmoothing: imageSmoothing,
    });
  }
>>>>>>> REPLACE
```

```javascript
### src/ol/layer/WebGLTile.js
<<<<<<< SEARCH
  /**
   * @param {Options} opt_options Tile layer options.
   */
  constructor(opt_options) {
    const options = opt_options ? assign({}, opt_options) : {};

    const style = options.style || {};
    delete options.style;

    const cacheSize = options.cacheSize;
    delete options.cacheSize;

    super(options);

    /**
     * @type {Style}
     * @private
     */
    this.style_ = style;

    /**
     * @type {number}
     * @private
     */
    this.cacheSize_ = cacheSize;

    /**
     * @type {Object<string, (string|number)>}
     * @private
     */
    this.styleVariables_ = this.style_.variables || {};

    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);
  }
=======
  /**
   * @param {Options} opt_options Tile layer options.
   */
  constructor(opt_options) {
    const options = opt_options ? assign({}, opt_options) : {};

    const style = options.style || {};
    delete options.style;

    const cacheSize = options.cacheSize;
    delete options.cacheSize;

    super(options);

    /**
     * @type {Style}
     * @private
     */
    this.style_ = style;

    /**
     * @type {number}
     * @private
     */
    this.cacheSize_ = cacheSize;

    /**
     * @type {Object<string, (string|number)>}
     * @private
     */
    this.styleVariables_ = this.style_.variables || {};

    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);

    // Ensure the source supports imageSmoothing option
    const source = this.getSource();
    if (source && !('getImageSmoothing' in source)) {
      source.getImageSmoothing = function() {
        return true; // Default to true if not supported
      };
    }
  }
>>>>>>> REPLACE
```
