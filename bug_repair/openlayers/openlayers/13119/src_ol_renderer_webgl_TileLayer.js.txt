```javascript
### src/ol/renderer/webgl/TileLayer.js
<<<<<<< SEARCH
/**
 * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
 * @param {import("../../extent.js").Extent} extent The extent to be rendered.
 * @param {number} z The zoom level.
 * @param {Object<number, Array<TileTexture>>} tileTexturesByZ The zoom level.
 */
=======
/**
 * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
 * @param {import("../../extent.js").Extent} extent The extent to be rendered.
 * @param {number} z The zoom level.
 * @param {Object<number, Array<TileTexture>>} tileTexturesByZ The zoom level.
 * @param {boolean} customBlend Whether to use custom blending.
 */
this.enqueueTiles = function(frameState, extent, z, tileTexturesByZ, customBlend) {
  // ... existing code ...
  this.helper.prepareDraw(frameState, !blend || customBlend);
  // ... existing code ...
};
>>>>>>> REPLACE
```

```javascript
### src/ol/renderer/webgl/TileLayer.js
<<<<<<< SEARCH
/**
 * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
 * @return {HTMLElement} The rendered element.
 */
renderFrame(frameState) {
  // ... existing code ...
  this.enqueueTiles(frameState, extent, z, tileTexturesByZ);
  // ... existing code ...
}
=======
/**
 * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
 * @return {HTMLElement} The rendered element.
 */
renderFrame(frameState) {
  // ... existing code ...
  this.enqueueTiles(frameState, extent, z, tileTexturesByZ, frameState.customBlend);
  // ... existing code ...
}
>>>>>>> REPLACE
```

```javascript
### src/ol/renderer/webgl/TileLayer.js
<<<<<<< SEARCH
/**
 * @typedef {Object} Options
 * @property {string} vertexShader Vertex shader source.
 * @property {string} fragmentShader Fragment shader source.
 * @property {Object<string, import("../../webgl/Helper").UniformValue>} [uniforms] Additional uniforms
 * made available to shaders.
 * @property {number} [cacheSize=512] The texture cache size.
 */
=======
/**
 * @typedef {Object} Options
 * @property {string} vertexShader Vertex shader source.
 * @property {string} fragmentShader Fragment shader source.
 * @property {Object<string, import("../../webgl/Helper").UniformValue>} [uniforms] Additional uniforms
 * made available to shaders.
 * @property {number} [cacheSize=512] The texture cache size.
 * @property {boolean} [customBlend=false] Whether to use custom blending.
 */
>>>>>>> REPLACE
```

```javascript
### src/ol/renderer/webgl/TileLayer.js
<<<<<<< SEARCH
/**
 * @param {LayerType} tileLayer Tile layer.
 * @param {Options} options Options.
 */
constructor(tileLayer, options) {
  // ... existing code ...
  this.customBlend_ = options.customBlend !== undefined ? options.customBlend : false;
  // ... existing code ...
}
=======
/**
 * @param {LayerType} tileLayer Tile layer.
 * @param {Options} options Options.
 */
constructor(tileLayer, options) {
  // ... existing code ...
  this.customBlend_ = options.customBlend !== undefined ? options.customBlend : false;
  // ... existing code ...
}
this.getCustomBlend = function() {
  return this.customBlend_;
};
this.setCustomBlend = function(customBlend) {
  this.customBlend_ = customBlend;
};
>>>>>>> REPLACE
```
