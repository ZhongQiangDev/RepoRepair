The issue described is that the `ref` passed to the `Dropdown` or `Multiselect` components is not being correctly forwarded, resulting in `undefined` when accessed. This is likely due to the `ref` not being properly forwarded within the `MultiSelect` component.

To fix this, we need to ensure that the `ref` is correctly forwarded to the `button` element inside the `MultiSelect` component. We can achieve this by using the `React.forwardRef` function and passing the `ref` to the `button` element.

Here's the fix:

```javascript
###packages/react/src/components/MultiSelect/MultiSelect.js
<<<<<<< SEARCH
const MultiSelect = React.forwardRef(function MultiSelect(
  {
    className: containerClassName,
    id,
    items,
    itemToString,
    titleText,
    helperText,
    label,
    type,
    size,
    disabled,
    initialSelectedItems,
    sortItems,
    compareItems,
    light,
    invalid,
    invalidText,
    warn,
    warnText,
    useTitleInItem,
    translateWithId,
    downshiftProps,
    open,
    selectionFeedback,
    onChange,
    onMenuChange,
    direction,
  },
  ref
) {
=======
const MultiSelect = React.forwardRef(function MultiSelect(
  {
    className: containerClassName,
    id,
    items,
    itemToString,
    titleText,
    helperText,
    label,
    type,
    size,
    disabled,
    initialSelectedItems,
    sortItems,
    compareItems,
    light,
    invalid,
    invalidText,
    warn,
    warnText,
    useTitleInItem,
    translateWithId,
    downshiftProps,
    open,
    selectionFeedback,
    onChange,
    onMenuChange,
    direction,
  },
  ref
) {
  // ... (existing code)

  return (
    <div className={wrapperClasses}>
      {titleText && (
        <label className={titleClasses} {...getLabelProps()}>
          {titleText}
        </label>
      )}
      <ListBox
        type={type}
        size={size}
        className={className}
        disabled={disabled}
        light={light}
        invalid={invalid}
        invalidText={invalidText}
        warn={warn}
        warnText={warnText}
        isOpen={isOpen}
        id={id}>
        {invalid && (
          <WarningFilled16 className={`${prefix}--list-box__invalid-icon`} />
        )}
        {showWarning && (
          <WarningAltFilled16
            className={`${prefix}--list-box__invalid-icon ${prefix}--list-box__invalid-icon--warning`}
          />
        )}
        <button
          type="button"
          ref={ref} // Forward the ref to the button element
          className={`${prefix}--list-box__field`}
          disabled={disabled}
          aria-disabled={disabled}
          {...getToggleButtonProps()}>
          {selectedItems.length > 0 && (
            <ListBox.Selection
              clearSelection={!disabled ? clearSelection : noop}
              selectionCount={selectedItems.length}
              translateWithId={translateWithId}
              disabled={disabled}
            />
          )}
          <span id={fieldLabelId} className={`${prefix}--list-box__label`}>
            {label}
          </span>
          <ListBox.MenuIcon isOpen={isOpen} translateWithId={translateWithId} />
        </button>
        <ListBox.Menu aria-multiselectable="true" {...getMenuProps()}>
          {isOpen &&
            sortItems(items, sortOptions).map((item, index) => {
              const itemProps = getItemProps({
                item,
              });
              const itemText = itemToString(item);
              const isChecked =
                selectedItems.filter((selected) => isEqual(selected, item))
                  .length > 0;
              return (
                <ListBox.MenuItem
                  key={itemProps.id}
                  isActive={isChecked}
                  isHighlighted={highlightedIndex === index}
                  title={itemText}
                  {...itemProps}>
                  <div className={`${prefix}--checkbox-wrapper`}>
                    <span
                      title={useTitleInItem ? itemText : null}
                      className={`${prefix}--checkbox-label`}
                      data-contained-checkbox-state={isChecked}
                      id={`${itemProps.id}__checkbox`}>
                      {itemText}
                    </span>
                  </div>
                </ListBox.MenuItem>
              );
            })}
        </ListBox.Menu>
      </ListBox>
      {!inline && !invalid && !warn && helperText && (
        <div id={helperId} className={helperClasses}>
          {helperText}
        </div>
      )}
    </div>
  );
});
>>>>>>> REPLACE
```
