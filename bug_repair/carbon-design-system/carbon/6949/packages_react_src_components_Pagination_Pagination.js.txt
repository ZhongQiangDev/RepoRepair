To address the issue of allowing developers to define custom labels for the `pageSizes` list in the Pagination component, we need to modify the component to accept an array of objects with `value` and `text` properties instead of just an array of numbers. This will allow for custom labels such as "All" to be used without causing NaN values.

Here's the required SEARCH/REPLACE edit:

```javascript
###packages/react/src/components/Pagination/Pagination.js
<<<<<<< SEARCH
    /**
     * The choices for `pageSize`.
     */
    pageSizes: PropTypes.arrayOf(PropTypes.number).isRequired,
=======
    /**
     * The choices for `pageSize` with custom labels.
     */
    pageSizes: PropTypes.arrayOf(
      PropTypes.shape({
        value: PropTypes.number.isRequired,
        text: PropTypes.string.isRequired,
      })
    ).isRequired,
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/Pagination/Pagination.js
<<<<<<< SEARCH
            {pageSizes.map((size) => (
              <SelectItem key={size} value={size} text={String(size)} />
            ))}
=======
            {pageSizes.map((sizeOption) => (
              <SelectItem key={sizeOption.value} value={sizeOption.value} text={sizeOption.text} />
            ))}
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/Pagination/Pagination.js
<<<<<<< SEARCH
    const pageSize = Number(evt.target.value);
=======
    const pageSize = evt.target.value;
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/Pagination/Pagination.js
<<<<<<< SEARCH
    const { pageSizes, page, pageSize } = this.props;
    this.state = {
      page: page,
      pageSize:
        pageSize && pageSizes.includes(pageSize) ? pageSize : pageSizes[0],
      prevPageSizes: pageSizes,
      prevPage: page,
      prevPageSize: pageSize,
    };
=======
    const { pageSizes, page, pageSize } = this.props;
    const defaultPageSize = pageSizes.find((sizeOption) => sizeOption.value === pageSize) || pageSizes[0];
    this.state = {
      page: page,
      pageSize: defaultPageSize.value,
      prevPageSizes: pageSizes,
      prevPage: page,
      prevPageSize: pageSize,
    };
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/Pagination/Pagination.js
<<<<<<< SEARCH
    const pageSizesChanged = !equals(pageSizes, prevPageSizes);
    if (pageSizesChanged && !pageSizes.includes(pageSize)) {
      pageSize = pageSizes[0];
    }
=======
    const pageSizesChanged = !equals(pageSizes, prevPageSizes);
    if (pageSizesChanged && !pageSizes.some((sizeOption) => sizeOption.value === pageSize)) {
      pageSize = pageSizes[0].value;
    }
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/Pagination/Pagination.js
<<<<<<< SEARCH
    const pageSizeChanged = pageSize !== prevPageSize;
    return !pageSizesChanged && !pageChanged && !pageSizeChanged
      ? null
      : {
          page: (pageSizeChanged && 1) || (pageChanged && page) || currentPage,
          pageSize: pageSizeChanged ? pageSize : currentPageSize,
          prevPageSizes: pageSizes,
          prevPage: page,
          prevPageSize: pageSize,
        };
=======
    const pageSizeChanged = pageSize !== prevPageSize;
    return !pageSizesChanged && !pageChanged && !pageSizeChanged
      ? null
      : {
          page: (pageSizeChanged && 1) || (pageChanged && page) || currentPage,
          pageSize: pageSizeChanged ? pageSize : currentPageSize,
          prevPageSizes: pageSizes,
          prevPage: page,
          prevPageSize: pageSize,
        };
>>>>>>> REPLACE
```

These changes will allow the `pageSizes` prop to accept an array of objects with `value` and `text` properties, enabling custom labels like "All" to be used without causing NaN values.
