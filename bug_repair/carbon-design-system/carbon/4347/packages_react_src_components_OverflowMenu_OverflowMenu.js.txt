To address the issue of adding a `--light` modifier to the Overflow Menu component, we need to introduce a new prop that allows the component to switch between light and dark themes. We'll add a `light` prop and modify the CSS class names accordingly.

```javascript
###packages/react/src/components/OverflowMenu/OverflowMenu.js
<<<<<<< SEARCH
const overflowMenuOptionsClasses = classNames(
  menuOptionsClass,
  `${prefix}--overflow-menu-options`,
  {
    [`${prefix}--overflow-menu--flip`]: this.props.flipped,
    [`${prefix}--overflow-menu-options--open`]: open,
  }
);
=======
const overflowMenuOptionsClasses = classNames(
  menuOptionsClass,
  `${prefix}--overflow-menu-options`,
  {
    [`${prefix}--overflow-menu--flip`]: this.props.flipped,
    [`${prefix}--overflow-menu-options--open`]: open,
    [`${prefix}--overflow-menu--light`]: this.props.light,
  }
);
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/OverflowMenu/OverflowMenu.js
<<<<<<< SEARCH
static defaultProps = {
  ariaLabel: 'Menu',
  iconDescription: 'open and close list of options',
  open: false,
  direction: DIRECTION_BOTTOM,
  flipped: false,
  renderIcon: OverflowMenuVertical16,
  onClick: () => {},
  onKeyDown: () => {},
  onClose: () => {},
  onOpen: () => {},
  tabIndex: 0,
  menuOffset: getMenuOffset,
  menuOffsetFlip: getMenuOffset,
};
=======
static defaultProps = {
  ariaLabel: 'Menu',
  iconDescription: 'open and close list of options',
  open: false,
  direction: DIRECTION_BOTTOM,
  flipped: false,
  light: false, // New prop for light theme
  renderIcon: OverflowMenuVertical16,
  onClick: () => {},
  onKeyDown: () => {},
  onClose: () => {},
  onOpen: () => {},
  tabIndex: 0,
  menuOffset: getMenuOffset,
  menuOffsetFlip: getMenuOffset,
};
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/OverflowMenu/OverflowMenu.js
<<<<<<< SEARCH
static propTypes = {
  /**
   * `true` if the menu should be open.
   */
  open: PropTypes.bool,
  /**
   * The menu direction.
   */
  direction: PropTypes.oneOf([DIRECTION_TOP, DIRECTION_BOTTOM]),
  /**
   * `true` if the menu alignment should be flipped.
   */
  flipped: PropTypes.bool,
  /**
   * The child nodes.
   */
  children: PropTypes.node,
  /**
   * The CSS class names.
   */
  className: PropTypes.string,
  /**
   * The `tabindex` attribute.
   */
  tabIndex: PropTypes.number,
  /**
   * The element ID.
   */
  id: PropTypes.string,
  /**
   * The ARIA label.
   */
  ariaLabel: PropTypes.string,
  /**
   * The event handler for the `click` event.
   */
  onClick: PropTypes.func,
  /**
   * The event handler for the `focus` event.
   */
  onFocus: PropTypes.func,
  /**
   * The event handler for the `keydown` event.
   */
  onKeyDown: PropTypes.func,
  /**
   * The icon description.
   */
  iconDescription: PropTypes.string.isRequired,
  /**
   * The adjustment in position applied to the floating menu.
   */
  menuOffset: PropTypes.oneOfType([
    PropTypes.shape({
      top: PropTypes.number,
      left: PropTypes.number,
    }),
    PropTypes.func,
  ]),
  /**
   * The adjustment in position applied to the floating menu.
   */
  menuOffsetFlip: PropTypes.oneOfType([
    PropTypes.shape({
      top: PropTypes.number,
      left: PropTypes.number,
    }),
    PropTypes.func,
  ]),
  /**
   * The CSS class for the icon.
   */
  iconClass: PropTypes.string,
  /**
   * Function called to override icon rendering.
   */
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
  /**
   * Function called when menu is closed
   */
  onClose: PropTypes.func,
  /**
   * The class to apply to the menu options
   */
  menuOptionsClass: PropTypes.string,
  /**
   * Function called when menu is closed
   */
  onOpen: PropTypes.func,
};
=======
static propTypes = {
  /**
   * `true` if the menu should be open.
   */
  open: PropTypes.bool,
  /**
   * The menu direction.
   */
  direction: PropTypes.oneOf([DIRECTION_TOP, DIRECTION_BOTTOM]),
  /**
   * `true` if the menu alignment should be flipped.
   */
  flipped: PropTypes.bool,
  /**
   * `true` if the menu should use light theme.
   */
  light: PropTypes.bool, // New prop for light theme
  /**
   * The child nodes.
   */
  children: PropTypes.node,
  /**
   * The CSS class names.
   */
  className: PropTypes.string,
  /**
   * The `tabindex` attribute.
   */
  tabIndex: PropTypes.number,
  /**
   * The element ID.
   */
  id: PropTypes.string,
  /**
   * The ARIA label.
   */
  ariaLabel: PropTypes.string,
  /**
   * The event handler for the `click` event.
   */
  onClick: PropTypes.func,
  /**
   * The event handler for the `focus` event.
   */
  onFocus: PropTypes.func,
  /**
   * The event handler for the `keydown` event.
   */
  onKeyDown: PropTypes.func,
  /**
   * The icon description.
   */
  iconDescription: PropTypes.string.isRequired,
  /**
   * The adjustment in position applied to the floating menu.
   */
  menuOffset: PropTypes.oneOfType([
    PropTypes.shape({
      top: PropTypes.number,
      left: PropTypes.number,
    }),
    PropTypes.func,
  ]),
  /**
   * The adjustment in position applied to the floating menu.
   */
  menuOffsetFlip: PropTypes.oneOfType([
    PropTypes.shape({
      top: PropTypes.number,
      left: PropTypes.number,
    }),
    PropTypes.func,
  ]),
  /**
   * The CSS class for the icon.
   */
  iconClass: PropTypes.string,
  /**
   * Function called to override icon rendering.
   */
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
  /**
   * Function called when menu is closed
   */
  onClose: PropTypes.func,
  /**
   * The class to apply to the menu options
   */
  menuOptionsClass: PropTypes.string,
  /**
   * Function called when menu is closed
   */
  onOpen: PropTypes.func,
};
>>>>>>> REPLACE
```

These changes introduce a new `light` prop that can be used to apply the `--light` modifier to the Overflow Menu component. The CSS class names are updated to include the `--light` modifier when the `light` prop is set to `true`.
