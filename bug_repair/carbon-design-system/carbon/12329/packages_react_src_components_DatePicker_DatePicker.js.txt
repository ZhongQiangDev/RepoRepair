The issue is that the `DatePicker` component does not use `React.forwardRef`, which is why you cannot pass a `ref` to it. To fix this, we need to wrap the `DatePicker` component with `React.forwardRef` and pass the `ref` to the appropriate element inside the component.

Here's the necessary change:

```javascript
###packages/react/src/components/DatePicker/DatePicker.js
<<<<<<< SEARCH
function DatePicker({
  allowInput,
  appendTo,
  children,
  className,
  closeOnSelect = true,
  dateFormat = 'm/d/Y',
  datePickerType,
  disable,
  enable,
  inline,
  light,
  locale = 'en',
  maxDate,
  minDate,
  onChange,
  onClose,
  onOpen,
  short = false,
  value,
  ...rest
}) {
=======
const DatePicker = React.forwardRef(({
  allowInput,
  appendTo,
  children,
  className,
  closeOnSelect = true,
  dateFormat = 'm/d/Y',
  datePickerType,
  disable,
  enable,
  inline,
  light,
  locale = 'en',
  maxDate,
  minDate,
  onChange,
  onClose,
  onOpen,
  short = false,
  value,
  ...rest
}, ref) => {
  const calendarRef = useRef(null);

  // ... rest of the component code ...

  return (
    <div className={wrapperClasses} {...rest} ref={ref}>
      <div className={datePickerClasses}>{childrenWithProps}</div>
    </div>
  );
});
>>>>>>> REPLACE
```

This change wraps the `DatePicker` component with `React.forwardRef` and passes the `ref` to the outer `div` element. This allows you to pass a `ref` to the `DatePicker` component and access the `div` element through the `ref`.
