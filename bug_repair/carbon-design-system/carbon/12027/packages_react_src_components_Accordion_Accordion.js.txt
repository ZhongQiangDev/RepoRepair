```javascript
###packages/react/src/components/Accordion/Accordion.js
<<<<<<< SEARCH
function Accordion({
  align = 'end',
  children,
  className: customClassName,
  disabled = false,
  size = 'md',
  ...rest
}) {
=======
function Accordion({
  align = 'end',
  children,
  className: customClassName,
  disabled = false,
  size = 'md',
  flush = false,
  ...rest
}) {
  const prefix = usePrefix();
  const className = cx(`${prefix}--accordion`, customClassName, {
    [`${prefix}--accordion--${align}`]: align,
    [`${prefix}--accordion--${size}`]: size,
    [`${prefix}--accordion--flush`]: flush,
  });
  return (
    <ul className={className} {...rest}>
      {disabled
        ? React.Children.toArray(children).map((child) => {
            return React.cloneElement(child, { disabled });
          })
        : children}
    </ul>
  );
}

Accordion.propTypes = {
  /**
   * Specify the alignment of the accordion heading title and chevron.
   */
  align: PropTypes.oneOf(['start', 'end']),

  /**
   * Pass in the children that will be rendered within the Accordion
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * Specify whether an individual AccordionItem should be disabled
   */
  disabled: PropTypes.bool,

  /**
   * Specify the size of the Accordion. Currently supports the following:
   */
  size: FeatureFlags.enabled('enable-v11-release')
    ? PropTypes.oneOf(['sm', 'md', 'lg'])
    : PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),

  /**
   * Specify whether the accordion content should be flush with the page
   */
  flush: PropTypes.bool,
};
>>>>>>> REPLACE
```
