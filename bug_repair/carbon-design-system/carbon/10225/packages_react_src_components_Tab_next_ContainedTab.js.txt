To implement the icon-only variant for both Line Tabs and Contained Tabs, we need to modify the `ContainedTab.js` file to support an icon-only mode. This involves adding a new prop to handle the icon-only variant and updating the rendering logic accordingly.

Here's the step-by-step approach:

1. Add a new prop `iconOnly` to the `ContainedTab` component.
2. Modify the rendering logic to display only the icon when `iconOnly` is `true`.

Let's implement these changes:

```typescript
###packages/react/src/components/Tab/next/ContainedTab.js
<<<<<<< SEARCH
const ContainedTab = React.forwardRef(function ContainedTab(
  {
    className,
    disabled,
    handleTabClick,
    handleTabKeyDown,
    id,
    index,
    label = 'provide a label',
    onClick = () => {},
    onKeyDown = () => {},
    renderButton,
    renderContent, // eslint-disable-line no-unused-vars
    selected = false,
    tabIndex = 0,
    ...other
  },
  ref
) {
=======
const ContainedTab = React.forwardRef(function ContainedTab(
  {
    className,
    disabled,
    handleTabClick,
    handleTabKeyDown,
    id,
    index,
    label = 'provide a label',
    onClick = () => {},
    onKeyDown = () => {},
    renderButton,
    renderContent, // eslint-disable-line no-unused-vars
    selected = false,
    tabIndex = 0,
    iconOnly = false, // New prop for icon-only variant
    ...other
  },
  ref
) {
>>>>>>> REPLACE
```

```typescript
###packages/react/src/components/Tab/next/ContainedTab.js
<<<<<<< SEARCH
      {renderButton ? (
        renderButton(buttonProps)
      ) : (
        <button type="button" role="tab" {...buttonProps}>
          {label}
        </button>
      )}
=======
      {renderButton ? (
        renderButton(buttonProps)
      ) : (
        <button type="button" role="tab" {...buttonProps}>
          {iconOnly ? <span className={`${prefix}--tabs__nav-link--icon`}>{label}</span> : label}
        </button>
      )}
>>>>>>> REPLACE
```

```typescript
###packages/react/src/components/Tab/next/ContainedTab.js
<<<<<<< SEARCH
ContainedTab.propTypes = {
  /**
   * Specify an optional className to be added to your Tab
   */
  className: PropTypes.string,

  /**
   * Whether your Tab is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * A handler that is invoked when a user clicks on the control.
   * Reserved for usage in Tabs
   */
  handleTabClick: PropTypes.func,

  /**
   * A handler that is invoked on the key down event for the control.
   * Reserved for usage in Tabs
   */
  handleTabKeyDown: PropTypes.func,

  /**
   * The element ID for the top-level element.
   */
  id: PropTypes.string,

  /**
   * The index of your Tab in your Tabs. Reserved for usage in Tabs
   */
  index: PropTypes.number,

  /**
   * Provide the contents of your Tab
   */
  label: PropTypes.node,

  /**
   * Provide a handler that is invoked when a user clicks on the control
   */
  onClick: PropTypes.func,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: PropTypes.func,

  /*
   * An optional parameter to allow overriding the anchor rendering.
   * Useful for using Tab along with react-router or other client
   * side router libraries.
   **/
  renderButton: PropTypes.func,

  /*
   * An optional parameter to allow overriding the content rendering.
   **/
  renderContent: PropTypes.func,

  /**
   * Whether your Tab is selected.
   * Reserved for usage in Tabs
   */
  selected: PropTypes.bool,

  /**
   * Specify the tab index of the `<button>` node
   */
  tabIndex: PropTypes.number,
};
=======
ContainedTab.propTypes = {
  /**
   * Specify an optional className to be added to your Tab
   */
  className: PropTypes.string,

  /**
   * Whether your Tab is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * A handler that is invoked when a user clicks on the control.
   * Reserved for usage in Tabs
   */
  handleTabClick: PropTypes.func,

  /**
   * A handler that is invoked on the key down event for the control.
   * Reserved for usage in Tabs
   */
  handleTabKeyDown: PropTypes.func,

  /**
   * The element ID for the top-level element.
   */
  id: PropTypes.string,

  /**
   * The index of your Tab in your Tabs. Reserved for usage in Tabs
   */
  index: PropTypes.number,

  /**
   * Provide the contents of your Tab
   */
  label: PropTypes.node,

  /**
   * Provide a handler that is invoked when a user clicks on the control
   */
  onClick: PropTypes.func,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: PropTypes.func,

  /*
   * An optional parameter to allow overriding the anchor rendering.
   * Useful for using Tab along with react-router or other client
   * side router libraries.
   **/
  renderButton: PropTypes.func,

  /*
   * An optional parameter to allow overriding the content rendering.
   **/
  renderContent: PropTypes.func,

  /**
   * Whether your Tab is selected.
   * Reserved for usage in Tabs
   */
  selected: PropTypes.bool,

  /**
   * Specify the tab index of the `<button>` node
   */
  tabIndex: PropTypes.number,

  /**
   * Whether the Tab should be rendered as an icon-only variant.
   */
  iconOnly: PropTypes.bool,
};
>>>>>>> REPLACE
```

These changes will allow the `ContainedTab` component to support an icon-only variant when the `iconOnly` prop is set to `true`. The `label` prop will be rendered as an icon within a span with the appropriate class for styling.
