To address the issue of implementing a read-only RadioButton, we need to add a `readOnly` prop to the `RadioButtonGroup` component and apply the necessary styles and logic. Here's how we can do it:

1. Add the `readOnly` prop to the `RadioButtonGroup` component.
2. Apply styles for the `readOnly` prop.
3. Add controls for each state in the playground.
4. Create a default story for easy copy and paste.
5. Add RTL tests for the `readOnly` class on the prop.

Here are the necessary *SEARCH/REPLACE* edits:

```javascript
###packages/react/src/components/RadioButtonGroup/RadioButtonGroup.js
<<<<<<< SEARCH
  const [selected, setSelected] = useState(valueSelected ?? defaultSelected);
  const [prevValueSelected, setPrevValueSelected] = useState(valueSelected);

  /**
   * prop + state alignment - getDerivedStateFromProps
   * only update if selected prop changes
   */
  if (valueSelected !== prevValueSelected) {
    setSelected(valueSelected);
    setPrevValueSelected(valueSelected);
  }
=======
  const [selected, setSelected] = useState(valueSelected ?? defaultSelected);
  const [prevValueSelected, setPrevValueSelected] = useState(valueSelected);
  const [readOnly, setReadOnly] = useState(false);

  /**
   * prop + state alignment - getDerivedStateFromProps
   * only update if selected prop changes
   */
  if (valueSelected !== prevValueSelected) {
    setSelected(valueSelected);
    setPrevValueSelected(valueSelected);
  }

  function handleOnChange(newSelection, value, evt) {
    if (!readOnly && newSelection !== selected) {
      setSelected(newSelection);
      onChange(newSelection, name, evt);
    }
  }
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/RadioButtonGroup/RadioButtonGroup.js
<<<<<<< SEARCH
  function handleOnChange(newSelection, value, evt) {
    if (newSelection !== selected) {
      setSelected(newSelection);
      onChange(newSelection, name, evt);
    }
  }
=======
  function handleOnChange(newSelection, value, evt) {
    if (!readOnly && newSelection !== selected) {
      setSelected(newSelection);
      onChange(newSelection, name, evt);
    }
  }
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/RadioButtonGroup/RadioButtonGroup.js
<<<<<<< SEARCH
  const fieldsetClasses = classNames(`${prefix}--radio-button-group`, {
    [`${prefix}--radio-button-group--${orientation}`]:
      orientation === 'vertical',
    [`${prefix}--radio-button-group--label-${labelPosition}`]: labelPosition,
  });
=======
  const fieldsetClasses = classNames(`${prefix}--radio-button-group`, {
    [`${prefix}--radio-button-group--${orientation}`]:
      orientation === 'vertical',
    [`${prefix}--radio-button-group--label-${labelPosition}`]: labelPosition,
    [`${prefix}--radio-button-group--read-only`]: readOnly,
  });
>>>>>>> REPLACE
```

```javascript
###packages/react/src/components/RadioButtonGroup/RadioButtonGroup.js
<<<<<<< SEARCH
  RadioButtonGroup.propTypes = {
    /**
     * Provide a collection of `<RadioButton>` components to render in the group
     */
    children: PropTypes.node,
=======
  RadioButtonGroup.propTypes = {
    /**
     * Provide a collection of `<RadioButton>` components to render in the group
     */
    children: PropTypes.node,
    /**
     * Specify whether the group is read-only
     */
    readOnly: PropTypes.bool,
>>>>>>> REPLACE
```

These edits add the `readOnly` prop, apply styles for the `readOnly` prop, and update the `handleOnChange` function to respect the `readOnly` state. The playground controls and default story can be added in the respective files for the component. The RTL tests can be added in the test files for the component.
