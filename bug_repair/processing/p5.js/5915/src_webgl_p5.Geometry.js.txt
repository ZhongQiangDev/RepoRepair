To address the issue of interpolating line colors vertex-wise in WebGL, we need to modify the WebGL rendering pipeline to handle per-vertex stroke colors. This involves changes to the vertex shader, fragment shader, and the p5.Geometry class. Below are the necessary *SEARCH/REPLACE* edits:

### 1. Modify the Vertex Shader

```javascript
### src/webgl/shaders/vertexShader.js
<<<<<<< SEARCH
attribute vec3 aPosition;
=======
attribute vec3 aPosition;
attribute vec4 aVertexColor;

varying vec4 vVertexColor;
void main() {
  vVertexColor = aVertexColor;
  gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0);
}
>>>>>>> REPLACE
```

### 2. Modify the Fragment Shader

```javascript
### src/webgl/shaders/fragmentShader.js
<<<<<<< SEARCH
precision mediump float;
=======
precision mediump float;

varying vec4 vVertexColor;
uniform bool uUseVertexColor;

void main() {
  if (uUseVertexColor) {
    gl_FragColor = vVertexColor;
  } else {
    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
  }
}
>>>>>>> REPLACE
```

### 3. Modify the p5.RendererGL Class

```javascript
### src/webgl/p5.RendererGL.js
<<<<<<< SEARCH
this._initShaders();
=======
this._initShaders();
this._useVertexColor = false;
this._lineColorBuffer = new _main.default.RenderBuffer(4, 'lineVertexColors', 'lineColorBuffer', 'aVertexColor', this, this._flatten);
>>>>>>> REPLACE
```

### 4. Modify the p5.Geometry Class

```javascript
### src/webgl/p5.Geometry.js
<<<<<<< SEARCH
export default p5.Geometry;
=======
this.lineVertexColors = [];

_main.default.Geometry.prototype._edgesToVertices = function () {
  const data = this.lineVertexColors.slice();
  this.lineVertexColors.length = 0;
  for (var i = 0; i < this.edges.length; i++) {
    const e0 = this.edges[i][0];
    const e1 = this.edges[i][1];
    if(data.length > 0){
      var beginColor = [data[4*e0], data[4*e0+1], data[4*e0+2], data[4*e0+3]];
      var endColor = [data[4*e1], data[4*e1+1], data[4*e1+2], data[4*e1+3]];
      this.lineVertexColors.push(beginColor, beginColor, endColor, endColor, beginColor, endColor);
    }
  }
}

export default p5.Geometry;
>>>>>>> REPLACE
```

### 5. Modify the p5.RendererGL Class to Set the Flag

```javascript
### src/webgl/p5.RendererGL.js
<<<<<<< SEARCH
this._useVertexColor = false;
=======
this._useVertexColor = false;

this._setUseVertexColor = function(useVertexColor) {
  this._useVertexColor = useVertexColor;
  this._gl.uniform1i(this._gl.getUniformLocation(this._program, 'uUseVertexColor'), this._useVertexColor);
}
>>>>>>> REPLACE
```

### 6. Modify the p5.RendererGL Class to Handle Line Colors

```javascript
### src/webgl/p5.RendererGL.js
<<<<<<< SEARCH
this._lineColorBuffer = new _main.default.RenderBuffer(4, 'lineVertexColors', 'lineColorBuffer', 'aVertexColor', this, this._flatten);
=======
this._lineColorBuffer = new _main.default.RenderBuffer(4, 'lineVertexColors', 'lineColorBuffer', 'aVertexColor', this, this._flatten);

this._setLineVertexColors = function(colors) {
  this._lineColorBuffer.setData(colors);
}
>>>>>>> REPLACE
```

### 7. Modify the p5.RendererGL Class to Use Line Colors

```javascript
### src/webgl/p5.RendererGL.js
<<<<<<< SEARCH
this._setUseVertexColor = function(useVertexColor) {
=======
this._setUseVertexColor = function(useVertexColor) {
  this._useVertexColor = useVertexColor;
  this._gl.uniform1i(this._gl.getUniformLocation(this._program, 'uUseVertexColor'), this._useVertexColor);
}

this._drawLines = function() {
  if (this._useVertexColor) {
    this._lineColorBuffer.bind();
  }
  this._gl.drawArrays(this._gl.LINES, 0, this._geometry.vertices.length);
}
>>>>>>> REPLACE
```

These changes should allow for per-vertex stroke color interpolation in WebGL.
