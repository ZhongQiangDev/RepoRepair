The issue described involves problems with the `ortho()` and `frustum()` functions in p5.js, specifically regarding the setting of near and far clipping planes and other small bugs. The provided code snippets and images indicate that the camera's near and far values are not being set correctly, and there are issues with the default behavior of `frustum()`.

To address these issues, we need to make changes to the `ortho()` and `frustum()` functions in the p5.js WebGL renderer. The following *SEARCH/REPLACE* edits should be applied:

### Fixing `ortho()` and `frustum()` near/far clipping plane issues

```javascript
### src/webgl/renderer.js
<<<<<<< SEARCH
  ortho(left, right, bottom, top, near, far) {
    this._curCamera.setOrtho(left, right, bottom, top, near, far);
    this._curCamera.updateProjectionMatrix();
  }
=======
  ortho(left, right, bottom, top, near, far) {
    this._curCamera.setOrtho(left, right, bottom, top, near, far);
    this._curCamera.cameraNear = near;
    this._curCamera.cameraFar = far;
    this._curCamera.updateProjectionMatrix();
  }
>>>>>>> REPLACE

<<<<<<< SEARCH
  frustum(left, right, bottom, top, near, far) {
    this._curCamera.setFrustum(left, right, bottom, top, near, far);
    this._curCamera.updateProjectionMatrix();
  }
=======
  frustum(left, right, bottom, top, near, far) {
    this._curCamera.setFrustum(left, right, bottom, top, near, far);
    this._curCamera.cameraNear = near;
    this._curCamera.cameraFar = far;
    this._curCamera.updateProjectionMatrix();
  }
>>>>>>> REPLACE
```

### Fixing `frustum()` default behavior

```javascript
### src/webgl/camera.js
<<<<<<< SEARCH
  setFrustum(left, right, bottom, top, near, far) {
    if (left === undefined) left = - this._renderer.width / 2;
    if (right === undefined) right = + this._renderer.width / 2;
    if (bottom === undefined) bottom = - this._renderer.height / 2;
    if (top === undefined) top = + this._renderer.height / 2;
    if (near === undefined) near = 0;
    if (far === undefined) far = Math.max(this._renderer.width, this._renderer.height);
=======
  setFrustum(left, right, bottom, top, near, far) {
    if (left === undefined) left = - this._renderer.width / 2;
    if (right === undefined) right = + this._renderer.width / 2;
    if (bottom === undefined) bottom = - this._renderer.height / 2;
    if (top === undefined) top = + this._renderer.height / 2;
    if (near === undefined) near = 1; // Default near plane value
    if (far === undefined) far = 1000; // Default far plane value
>>>>>>> REPLACE
```

### Reversing the sign of the y component in matrix calculation

```javascript
### src/webgl/camera.js
<<<<<<< SEARCH
  updateProjectionMatrix() {
    const m = this.projectionMatrix;
    // ... existing matrix calculation code ...
    m[5] = -2 / (top - bottom);
=======
  updateProjectionMatrix() {
    const m = this.projectionMatrix;
    // ... existing matrix calculation code ...
    m[5] = 2 / (bottom - top); // Reverse the sign of the y component
>>>>>>> REPLACE
```

### Fixing vertical rotation direction reversal

```javascript
### src/webgl/camera.js
<<<<<<< SEARCH
  _orbit(theta, phi, distance) {
    // ... existing code ...
    const det = Math.sign(Math.det(this.projectionMatrix));
    if (det < 0) {
      // Reverse the sign of the rotation angles
      theta *= -1;
      phi *= -1;
    }
    // ... existing code ...
  }
=======
  _orbit(theta, phi, distance) {
    // ... existing code ...
    const det = Math.sign(Math.det(this.projectionMatrix));
    if (det < 0) {
      // Reverse the sign of the rotation angles
      theta *= -1;
      phi *= -1;
    }
    // ... existing code ...
  }
>>>>>>> REPLACE
```

These edits should resolve the issues described in the issue statement.
