The issue is that the vertex ordering for `QUADS` in WebGL mode is different from 2D mode, causing self-intersections. The current implementation treats `QUADS` as if they were `QUAD_STRIP`, which results in incorrect rendering. To fix this, we need to ensure that the vertices are added in a consistent CW or CCW order for each quad.

Here's the fix:

```javascript
### src/webgl/p5.RendererGL.Immediate.js
<<<<<<< SEARCH
  if (this.immediateMode.shapeMode === constants.QUADS) {
    // A finished quad turned into triangles should leave 6 vertices in the
    // buffer:
    // 0--2     0--2   3
    // |  | --> | /  / |
    // 1--3     1   4--5
    // When vertex index 3 is being added, add the necessary duplicates.
    if (this.immediateMode.geometry.vertices.length % 6 === 3) {
      for (const key in immediateBufferStrides) {
        const stride = immediateBufferStrides[key];
        const buffer = this.immediateMode.geometry[key];
        buffer.push(
          ...buffer.slice(buffer.length - stride, buffer.length),
          ...buffer.slice(buffer.length - 2 * stride, buffer.length - stride)
        );
      }
    }
  }
=======
  if (this.immediateMode.shapeMode === constants.QUADS) {
    // A finished quad turned into triangles should leave 6 vertices in the
    // buffer:
    // 0--2     0--2   3
    // |  | --> | /  / |
    // 1--3     1   4--5
    // When vertex index 3 is being added, add the necessary duplicates.
    if (this.immediateMode.geometry.vertices.length % 6 === 3) {
      for (const key in immediateBufferStrides) {
        const stride = immediateBufferStrides[key];
        const buffer = this.immediateMode.geometry[key];
        buffer.push(
          ...buffer.slice(buffer.length - stride, buffer.length),
          ...buffer.slice(buffer.length - 2 * stride, buffer.length - stride)
        );
      }
    } else if (this.immediateMode.geometry.vertices.length % 6 === 0) {
      // Add the last vertex to complete the quad in a consistent CW order
      for (const key in immediateBufferStrides) {
        const stride = immediateBufferStrides[key];
        const buffer = this.immediateMode.geometry[key];
        buffer.push(
          ...buffer.slice(buffer.length - 3 * stride, buffer.length - 2 * stride)
        );
      }
    }
  }
>>>>>>> REPLACE
```

This change ensures that the vertices are added in a consistent CW order for each quad, which should resolve the self-intersection issue in WebGL mode.
