The issue described is related to the fill of certain shapes not working properly in WebGL mode. The problem seems to be related to how vertices are being handled and rendered in WebGL mode. The provided code example shows that the fill is not being applied correctly, creating an unintended shape.

To fix this issue, we need to ensure that the vertices are being processed correctly in WebGL mode. The `vertex` method should properly handle the vertex data and pass it to the WebGL renderer.

Here's the proposed fix:

```javascript
### src/core/shape/vertex.js
<<<<<<< SEARCH
p5.prototype.vertex = function(x, y, moveTo, u, v) {
  if (this._renderer.isP3D) {
    this._renderer.vertex.apply(this._renderer, arguments);
  } else {
    var vert = [];
    vert.isVert = true;
    vert[0] = x;
    vert[1] = y;
    vert[2] = 0;
    vert[3] = 0;
    vert[4] = 0;
    vert[5] = this._renderer._getFill();
    vert[6] = this._renderer._getStroke();

    if (moveTo) {
      vert.moveTo = moveTo;
    }
    if (isContour) {
      if (contourVertices.length === 0) {
        vert.moveTo = true;
      }
      contourVertices.push(vert);
    } else {
      vertices.push(vert);
    }
  }
  return this;
};
=======
p5.prototype.vertex = function(x, y, z, u, v) {
  if (this._renderer.isP3D) {
    this._renderer.vertex.apply(this._renderer, arguments);
  } else {
    var vert = [];
    vert.isVert = true;
    vert[0] = x;
    vert[1] = y;
    vert[2] = z || 0; // Ensure z is set to 0 if not provided
    vert[3] = u || 0; // Ensure u is set to 0 if not provided
    vert[4] = v || 0; // Ensure v is set to 0 if not provided
    vert[5] = this._renderer._getFill();
    vert[6] = this._renderer._getStroke();

    if (arguments.length >= 3 && arguments[2] === true) {
      vert.moveTo = true;
    }
    if (isContour) {
      if (contourVertices.length === 0) {
        vert.moveTo = true;
      }
      contourVertices.push(vert);
    } else {
      vertices.push(vert);
    }
  }
  return this;
};
>>>>>>> REPLACE
```

This change ensures that the `vertex` method properly handles the z, u, and v parameters, which are necessary for WebGL mode. It also checks if the third argument is `true` to determine if it should move to the specified vertex. This should help in correctly rendering the fill for shapes in WebGL mode.
