The issue described is related to the WebGL blending mode not working correctly with transparent textures, specifically in the `MULTIPLY` blend mode. The problem is that the alpha channel is being ignored, causing the text to appear as solid rectangles instead of respecting the transparency of the glyphs.

To fix this, we need to adjust the blending function for the `MULTIPLY` blend mode to properly handle the alpha channel. The current implementation uses `gl.ZERO` for the source color, which ignores the alpha channel. Instead, we should use `gl.SRC_ALPHA` for the source color and `gl.ONE_MINUS_SRC_ALPHA` for the destination color.

Here's the fix:

```javascript
### src/webgl/material.js
<<<<<<< SEARCH
    case constants.MULTIPLY:
      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
      gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ONE, gl.ONE);
      break;
=======
    case constants.MULTIPLY:
      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
      break;
>>>>>>> REPLACE
```
