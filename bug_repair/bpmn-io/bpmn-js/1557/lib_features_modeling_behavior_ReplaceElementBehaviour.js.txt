The issue described is related to an error thrown when morphing a `DataStoreReference` to a `DataObjectReference` outside of a pool. The error occurs because the code attempts to access a property of an undefined object during the morphing process.

To fix this issue, we need to ensure that the morphing operation is only allowed within a pool or handle the case where it is outside a pool gracefully.

Here's the proposed fix:

```javascript
### lib/features/modeling/behavior/ReplaceElementBehaviour.js
<<<<<<< SEARCH
ReplaceElementBehaviour.prototype.replaceElements = function(elements, newElements) {
  var elementRegistry = this._elementRegistry,
      bpmnReplace = this._bpmnReplace,
      selection = this._selection;

  forEach(newElements, function(replacement) {
    var newElement = {
      type: replacement.newElementType
    };

    var oldElement = elementRegistry.get(replacement.oldElementId);

    var idx = elements.indexOf(oldElement);

    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });
  });

  if (newElements) {
    selection.select(elements);
  }
};
=======
ReplaceElementBehaviour.prototype.replaceElements = function(elements, newElements) {
  var elementRegistry = this._elementRegistry,
      bpmnReplace = this._bpmnReplace,
      selection = this._selection;

  forEach(newElements, function(replacement) {
    var newElement = {
      type: replacement.newElementType
    };

    var oldElement = elementRegistry.get(replacement.oldElementId);

    // Check if the oldElement is within a pool
    if (!oldElement || !oldElement.parent || !oldElement.parent.is('bpmn:Pool')) {
      console.warn('Morphing outside of a pool is not supported.');
      return;
    }

    var idx = elements.indexOf(oldElement);

    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });
  });

  if (newElements) {
    selection.select(elements);
  }
};
>>>>>>> REPLACE
```

This fix adds a check to ensure that the morphing operation is only performed if the `oldElement` is within a pool. If the `oldElement` is outside a pool, a warning is logged, and the morphing operation is skipped. This prevents the error from occurring and ensures that the application behaves as expected.
