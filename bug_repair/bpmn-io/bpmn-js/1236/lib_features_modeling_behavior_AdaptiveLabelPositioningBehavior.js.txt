The issue described is related to the dimensions of an Ad Hoc Collapsed Subprocess getting distorted when it is collapsed and then turned into an Ad Hoc Subprocess. The provided code snippet is related to label positioning and does not directly address the resizing of shapes. However, the issue might be related to how the dimensions of the shape are being calculated or updated when the subprocess is collapsed and then turned into an Ad Hoc Subprocess.

To address this issue, we need to ensure that the dimensions of the subprocess are correctly maintained when it is collapsed and then turned into an Ad Hoc Subprocess. This might involve modifying the code that handles the resizing or updating of the subprocess dimensions.

Since the provided code snippet does not directly address the resizing of shapes, we need to look for other parts of the codebase that handle the resizing or updating of subprocess dimensions. However, based on the provided code, we can make an educated guess that the issue might be related to how the label positioning is affecting the dimensions of the subprocess.

Here is a potential fix that involves modifying the `checkLabelAdjustment` function to ensure that the dimensions of the subprocess are not affected by the label positioning:

```javascript
### lib/features/modeling/behavior/AdaptiveLabelPositioningBehavior.js
<<<<<<< SEARCH
function checkLabelAdjustment(element) {

    // skip non-existing labels
    if (!hasExternalLabel(element)) {
      return;
    }

    var optimalPosition = getOptimalPosition(element);

    // no optimal position found
    if (!optimalPosition) {
      return;
    }

    adjustLabelPosition(element, optimalPosition);
}
=======
function checkLabelAdjustment(element) {

    // skip non-existing labels
    if (!hasExternalLabel(element)) {
      return;
    }

    // Check if the element is a subprocess and skip label adjustment if it is collapsed
    if (element.type === 'bpmn:SubProcess' && element.collapsed) {
      return;
    }

    var optimalPosition = getOptimalPosition(element);

    // no optimal position found
    if (!optimalPosition) {
      return;
    }

    adjustLabelPosition(element, optimalPosition);
}
>>>>>>> REPLACE
```

This fix ensures that the label adjustment is skipped if the element is a collapsed subprocess, which might help in maintaining the correct dimensions of the subprocess when it is turned into an Ad Hoc Subprocess. However, this is just a potential fix and further investigation might be required to identify the exact cause of the issue.
