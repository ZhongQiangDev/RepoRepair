The issue described is that when an expanded Sub Process is collapsed and then turned into an Ad Hoc Sub Process, the dimensions of the Sub Process become unexpected. The code provided sets minimum dimensions for various BPMN elements during a resize operation, but it does not specifically handle the case of an Ad Hoc Sub Process.

To fix this issue, we need to ensure that the minimum dimensions are correctly set for an Ad Hoc Sub Process as well. We can do this by adding a condition to check if the shape is an Ad Hoc Sub Process and setting the appropriate minimum dimensions.

Here is the *SEARCH/REPLACE* edit to fix the issue:

```javascript
### lib/features/modeling/behavior/ResizeBehavior.js
<<<<<<< SEARCH
    if (is(shape, 'bpmn:SubProcess') && isExpanded(shape)) {
      context.minDimensions = SUB_PROCESS_MIN_DIMENSIONS;
    }
=======
    if (is(shape, 'bpmn:SubProcess') && isExpanded(shape)) {
      context.minDimensions = SUB_PROCESS_MIN_DIMENSIONS;
    }

    if (is(shape, 'bpmn:SubProcess') && shape.adhoc) {
      context.minDimensions = SUB_PROCESS_MIN_DIMENSIONS;
    }
>>>>>>> REPLACE
```

This edit adds a new condition to check if the shape is an Ad Hoc Sub Process (`shape.adhoc`) and sets the minimum dimensions to `SUB_PROCESS_MIN_DIMENSIONS` if it is. This should ensure that the dimensions of an Ad Hoc Sub Process are handled correctly.
