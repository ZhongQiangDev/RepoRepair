The issue described is that when changing between parallel and sequential multi-instance properties, the multi-instance properties are lost. This suggests that the properties are not being preserved during the transition between these states.

To address this, we need to ensure that the multi-instance properties are correctly stored and restored when switching between parallel and sequential modes. The `UpdatePropertiesHandler` is responsible for updating properties, so we need to modify it to handle multi-instance properties appropriately.

Here's the proposed fix:

```javascript
### lib/features/modeling/cmd/UpdatePropertiesHandler.js
<<<<<<< SEARCH
function setProperties(element, properties) {
  var businessObject = element.businessObject,
      di = getDi(element);

  forEach(properties, function(value, key) {

    if (key !== DI) {
      businessObject.set(key, value);
    } else {

      // only update, if di exists
      if (di) {
        setDiProperties(di, value);
      }
    }
  });
}
=======
function setProperties(element, properties) {
  var businessObject = element.businessObject,
      di = getDi(element);

  // Preserve multi-instance properties
  var multiInstanceProperties = ['loopCardinality', 'completionCondition', 'isSequential'];

  // Store existing multi-instance properties
  var existingMultiInstanceProperties = {};
  multiInstanceProperties.forEach(function(prop) {
    existingMultiInstanceProperties[prop] = businessObject.get(prop);
  });

  forEach(properties, function(value, key) {

    if (key !== DI) {
      businessObject.set(key, value);
    } else {

      // only update, if di exists
      if (di) {
        setDiProperties(di, value);
      }
    }
  });

  // Restore multi-instance properties if they were not explicitly set in the new properties
  multiInstanceProperties.forEach(function(prop) {
    if (properties[prop] === undefined) {
      businessObject.set(prop, existingMultiInstanceProperties[prop]);
    }
  });
}
>>>>>>> REPLACE
```

This modification ensures that the multi-instance properties are stored before updating other properties and restored if they are not explicitly set in the new properties. This should prevent the loss of multi-instance properties when switching between parallel and sequential modes.
