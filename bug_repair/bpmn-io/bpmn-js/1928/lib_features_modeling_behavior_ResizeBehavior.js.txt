The issue described is that an empty pool is being resized vertically when it should not be. The code provided does not seem to handle the specific case of an empty pool. To fix this, we need to add a condition to prevent resizing of an empty pool.

Here's the proposed fix:

```javascript
### lib/features/modeling/behavior/ResizeBehavior.js
<<<<<<< SEARCH
if (is(shape, 'bpmn:Lane') || is(shape, 'bpmn:Participant')) {
  context.resizeConstraints = getParticipantResizeConstraints(shape, direction, balanced);
}
=======
if (is(shape, 'bpmn:Lane') || is(shape, 'bpmn:Participant')) {
  // Check if the participant is an empty pool
  if (!is(shape, 'bpmn:Participant') || !isEmptyPool(shape)) {
    context.resizeConstraints = getParticipantResizeConstraints(shape, direction, balanced);
  }
}
// Add a function to check if the participant is an empty pool
function isEmptyPool(shape) {
  // Add logic to determine if the participant is an empty pool
  // For example, check if it has no lanes or other elements inside
  return !shape.businessObject.get('laneSet') || shape.businessObject.get('laneSet').lanes.length === 0;
}
>>>>>>> REPLACE
```

This code adds a check to see if the participant is an empty pool before applying the resize constraints. If it is an empty pool, the resize constraints are not applied, preventing the pool from being resized. The `isEmptyPool` function is a placeholder and should be implemented with the appropriate logic to determine if a participant is an empty pool.
