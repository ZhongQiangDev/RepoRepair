The issue described involves labels inside a sub-process not being hidden when the sub-process is collapsed. The problem seems to be related to the ordering and rendering of elements within the BPMN diagram. The `BpmnOrderingProvider` is responsible for determining the order in which elements are rendered, and it appears that the labels inside the sub-process are not being correctly ordered when the sub-process is collapsed.

To address this, we need to ensure that labels inside a collapsed sub-process are rendered in a way that they are hidden or positioned correctly. This can be achieved by adjusting the ordering logic for elements inside a sub-process.

Here is the proposed fix:

```javascript
###lib/features/ordering/BpmnOrderingProvider.js
<<<<<<< SEARCH
  function computeOrder(element) {
    if (element.labelTarget) {
      return { level: 10 };
    }

    var entry = find(orders, function(o) {
      return isAny(element, [ o.type ]);
    });

    return entry && entry.order || { level: 1 };
  }
=======
  function computeOrder(element) {
    if (element.labelTarget) {
      // Check if the label is inside a collapsed sub-process
      if (element.parent && element.parent.type === 'bpmn:SubProcess' && element.parent.collapsed) {
        return { level: 1 }; // Render labels inside collapsed sub-process at a lower level
      }
      return { level: 10 };
    }

    var entry = find(orders, function(o) {
      return isAny(element, [ o.type ]);
    });

    return entry && entry.order || { level: 1 };
  }
>>>>>>> REPLACE
```

This change ensures that labels inside a collapsed sub-process are rendered at a lower level, effectively hiding them when the sub-process is collapsed. This should resolve the issue of visible labels after changing to a collapsed sub-process.
