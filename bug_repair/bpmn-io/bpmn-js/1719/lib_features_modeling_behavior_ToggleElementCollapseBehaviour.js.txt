The issue described is that labels inside a sub-process remain visible after the sub-process is collapsed, which is not the expected behavior. The labels should be hidden when the sub-process is collapsed. The code provided includes a function `hideEmptyLabels` that hides labels without names, but it does not address the visibility of labels when the sub-process is collapsed.

To fix this issue, we need to ensure that all labels inside the sub-process are hidden when the sub-process is collapsed. We can achieve this by modifying the `executed` function to hide all labels inside the sub-process when it is collapsed.

Here is the proposed fix:

```javascript
###lib/features/modeling/behavior/ToggleElementCollapseBehaviour.js
<<<<<<< SEARCH
  this.executed([ 'shape.toggleCollapse' ], LOW_PRIORITY, function(e) {

    var context = e.context,
        shape = context.shape;

    if (!is(shape, 'bpmn:SubProcess')) {
      return;
    }

    if (!shape.collapsed) {

      // all children got made visible through djs, hide empty labels
      hideEmptyLabels(shape.children);

      // remove collapsed marker
      getDi(shape).isExpanded = true;
    } else {

      // place collapsed marker
      getDi(shape).isExpanded = false;
    }
  });
=======
  this.executed([ 'shape.toggleCollapse' ], LOW_PRIORITY, function(e) {

    var context = e.context,
        shape = context.shape;

    if (!is(shape, 'bpmn:SubProcess')) {
      return;
    }

    if (!shape.collapsed) {

      // all children got made visible through djs, hide empty labels
      hideEmptyLabels(shape.children);

      // remove collapsed marker
      getDi(shape).isExpanded = true;
    } else {

      // place collapsed marker
      getDi(shape).isExpanded = false;

      // Hide all labels inside the sub-process when it is collapsed
      shape.children.forEach(function(child) {
        if (child.type === 'label') {
          child.hidden = true;
        }
      });
    }
  });
>>>>>>> REPLACE
```
