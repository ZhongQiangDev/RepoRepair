The issue described is that when changing an intermediate event to a "Timer Intermediate Catch Event," the `conditionExpression` from the sequence flow is removed. This behavior is likely caused by the `element.updateProperties` call in the `postExecuted` hook for the `element.updateProperties` event. Specifically, the code that removes the `conditionExpression` when morphing to a default flow is the culprit.

To fix this, we need to ensure that the `conditionExpression` is not removed when the event type is changed to a "Timer Intermediate Catch Event."

Here's the proposed fix:

```javascript
### lib/features/modeling/behavior/ReplaceConnectionBehavior.js
<<<<<<< SEARCH
    // remove condition expression when morphing to default flow
    if (properties.default) {
      connection = find(
        element.outgoing,
        matchPattern({ id: element.businessObject.default.id })
      );

      if (connection) {
        modeling.updateProperties(connection, { conditionExpression: undefined });
      }
    }
=======
    // remove condition expression when morphing to default flow, but not when changing to Timer Intermediate Catch Event
    if (properties.default && !is(element, 'bpmn:IntermediateCatchEvent')) {
      connection = find(
        element.outgoing,
        matchPattern({ id: element.businessObject.default.id })
      );

      if (connection) {
        modeling.updateProperties(connection, { conditionExpression: undefined });
      }
    }
>>>>>>> REPLACE
```

This change ensures that the `conditionExpression` is only removed when morphing to a default flow and not when changing to a "Timer Intermediate Catch Event."
