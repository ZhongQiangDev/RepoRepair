The issue described is that the diagram jumps when wrapping a process in a pool. This behavior is likely caused by the `getParticipantBounds` function, which calculates the bounds of the participant based on the children's bounding box. The jump occurs because the calculated bounds might not align with the current viewport, causing the diagram to reposition.

To fix this, we need to ensure that the participant's bounds are calculated in a way that keeps the diagram within the current viewport. One approach is to adjust the participant's bounds to be relative to the current viewport's position.

Here's the proposed fix:

```javascript
### lib/features/modeling/behavior/CreateParticipantBehavior.js
<<<<<<< SEARCH
function getParticipantBounds(shape, childrenBBox) {
  var participantBounds = {
    x: childrenBBox.x - HORIZONTAL_PARTICIPANT_PADDING,
    y: childrenBBox.y - VERTICAL_PARTICIPANT_PADDING,
    width: childrenBBox.width + 2 * HORIZONTAL_PARTICIPANT_PADDING,
    height: childrenBBox.height + 2 * VERTICAL_PARTICIPANT_PADDING
  };

  return participantBounds;
}
=======
function getParticipantBounds(shape, childrenBBox, viewport) {
  var participantBounds = {
    x: childrenBBox.x - HORIZONTAL_PARTICIPANT_PADDING + viewport.x,
    y: childrenBBox.y - VERTICAL_PARTICIPANT_PADDING + viewport.y,
    width: childrenBBox.width + 2 * HORIZONTAL_PARTICIPANT_PADDING,
    height: childrenBBox.height + 2 * VERTICAL_PARTICIPANT_PADDING
  };

  return participantBounds;
}

// Update the fit participant event listener to pass the viewport
eventBus.on([
  'create.start',
  'shape.move.start'
], HIGH_PRIORITY, function(event) {
  var context = event.context,
      shape = context.shape,
      rootElement = canvas.getRootElement(),
      viewport = canvas.getViewport();

  if (!is(shape, 'bpmn:Participant') ||
    !is(rootElement, 'bpmn:Process') ||
    !rootElement.children.length) {
    return;
  }

  // ignore connections, groups and labels
  var children = rootElement.children.filter(function(element) {
    return !is(element, 'bpmn:Group') &&
      !isLabel(element) &&
      !isConnection(element);
  });

  // ensure for available children to calculate bounds
  if (!children.length) {
    return;
  }

  var childrenBBox = getBBox(children);

  var participantBounds = getParticipantBounds(shape, childrenBBox, viewport);

  // assign width and height
  assign(shape, participantBounds);

  // assign create constraints
  context.createConstraints = getParticipantCreateConstraints(shape, childrenBBox);
});
>>>>>>> REPLACE
```

This fix adjusts the `getParticipantBounds` function to take the current viewport into account when calculating the participant's bounds. It also updates the event listener to pass the viewport to the `getParticipantBounds` function. This should help keep the diagram within the current viewport and prevent the jump when wrapping a process in a pool.
