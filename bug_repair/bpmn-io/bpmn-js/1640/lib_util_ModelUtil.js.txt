The issue described is related to the loss of multi-instance properties when switching between parallel and sequential multi-instance configurations in a BPMN modeler. The provided code snippet does not directly relate to the issue, as it is from a utility file that checks BPMN element types and retrieves business objects. However, the issue likely lies in the BPMN modeler's logic for handling multi-instance properties during the switch between parallel and sequential configurations.

To address this issue, we need to ensure that the multi-instance properties are preserved when switching between parallel and sequential configurations. This likely involves modifying the BPMN modeler's code that handles the multi-instance configuration changes.

Since the provided code snippet does not contain the relevant logic, we need to search for the code that handles multi-instance configuration changes. This code is likely located in a different file within the BPMN modeler's codebase.

Assuming we have found the relevant code, here is an example of how the fix might look:

```javascript
### src/modeler/properties/MultiInstanceProperties.js
<<<<<<< SEARCH
function switchMultiInstanceType(element, newType) {
  const businessObject = getBusinessObject(element);
  const multiInstanceLoopCharacteristics = businessObject.get('multiInstanceLoopCharacteristics');

  if (newType === 'parallel') {
    multiInstanceLoopCharacteristics.isSequential = false;
  } else if (newType === 'sequential') {
    multiInstanceLoopCharacteristics.isSequential = true;
  }

  // Clear multi-instance properties
  multiInstanceLoopCharacteristics.loopCardinality = '';
  multiInstanceLoopCharacteristics.collection = '';
  multiInstanceLoopCharacteristics.elementVariable = '';
  multiInstanceLoopCharacteristics.completionCondition = '';
=======
function switchMultiInstanceType(element, newType) {
  const businessObject = getBusinessObject(element);
  const multiInstanceLoopCharacteristics = businessObject.get('multiInstanceLoopCharacteristics');

  if (newType === 'parallel') {
    multiInstanceLoopCharacteristics.isSequential = false;
  } else if (newType === 'sequential') {
    multiInstanceLoopCharacteristics.isSequential = true;
  }

  // Preserve multi-instance properties
  const loopCardinality = multiInstanceLoopCharacteristics.loopCardinality;
  const collection = multiInstanceLoopCharacteristics.collection;
  const elementVariable = multiInstanceLoopCharacteristics.elementVariable;
  const completionCondition = multiInstanceLoopCharacteristics.completionCondition;

  // Clear multi-instance properties
  multiInstanceLoopCharacteristics.loopCardinality = '';
  multiInstanceLoopCharacteristics.collection = '';
  multiInstanceLoopCharacteristics.elementVariable = '';
  multiInstanceLoopCharacteristics.completionCondition = '';

  // Restore multi-instance properties
  multiInstanceLoopCharacteristics.loopCardinality = loopCardinality;
  multiInstanceLoopCharacteristics.collection = collection;
  multiInstanceLoopCharacteristics.elementVariable = elementVariable;
  multiInstanceLoopCharacteristics.completionCondition = completionCondition;
>>>>>>> REPLACE
```

This example assumes that the `switchMultiInstanceType` function is responsible for handling the switch between parallel and sequential multi-instance configurations. The fix involves preserving the multi-instance properties before clearing them and then restoring them after the switch. This ensures that the multi-instance properties are not lost when switching between configurations.
