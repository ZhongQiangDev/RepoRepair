I'll analyze the problem and identify the most relevant files for fixing the issue with QuerySet.defer() not clearing deferred fields when chaining with only().

## 1. Identifying the Wrong Behavior
The issue is that when chaining `defer()` after `only()` in a Django QuerySet, the deferred fields are not being properly excluded from the SQL query. Specifically:
- `Company.objects.only("name").defer("name")` loads all fields instead of just the primary key
- `Company.objects.only("name").defer("name").defer("country")` also loads all fields
- The expected behavior would be to only load the primary key field in these cases

## 2. Analyzing the Cause
The problem appears to be in how Django's QuerySet handles the combination of `only()` and `defer()` methods. The `only()` method specifies which fields to include, while `defer()` specifies which fields to exclude. When chaining these methods, it seems that `defer()` is not properly removing fields from the set of fields previously specified by `only()`.

This is likely an issue in the QuerySet implementation, specifically in how it tracks and manages deferred fields when these methods are combined.

## 3. Most Relevant Files

```
django/db/models/query.py
django/db/models/base.py
django/db/models/sql/query.py
django/db/models/fields/related.py
django/db/models/manager.py
```

The most important file is `django/db/models/query.py` as it contains the QuerySet class with the implementation of `only()` and `defer()` methods. This is where the core issue likely resides.

The `django/db/models/base.py` file contains the Model class which interacts with QuerySet and handles field management.

The `django/db/models/sql/query.py` file contains the Query class that builds the actual SQL queries based on the QuerySet configuration.

The `django/db/models/fields/related.py` is relevant because field relationships can affect how deferring works.

Finally, `django/db/models/manager.py` contains the Manager class which is the entry point for QuerySet operations.
