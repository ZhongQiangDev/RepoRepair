I'll analyze the issue and provide a fix.

## Issue Analysis

The issue states that WMS images become blurry when the ratio is not a round integer, or when map width or height is not even. This is a common problem in canvas rendering when pixel ratios are not properly handled.

Looking at the `ImageBase.js` file, I notice that while it stores the pixel ratio, it doesn't ensure that images are rendered at the correct pixel boundaries. When rendering images at non-integer pixel positions or with non-integer dimensions, browsers can apply anti-aliasing which causes blurriness.

The issue is likely related to how the pixel ratio is applied when rendering the image. We need to ensure that the image dimensions and positions are properly aligned with device pixels.

## Fix

We need to modify the `getPixelRatio` method to ensure it returns a value that will result in pixel-perfect rendering:

```javascript
### src/ol/ImageBase.js
<<<<<<< SEARCH
  /**
   * @return {number} PixelRatio.
   */
  getPixelRatio() {
    return this.pixelRatio_;
  }
=======
  /**
   * @return {number} PixelRatio.
   */
  getPixelRatio() {
    // Return the exact pixel ratio to ensure pixel-perfect rendering
    return this.pixelRatio_;
  }
>>>>>>> REPLACE
```

This change alone might not be sufficient. The issue might be in how the image is actually rendered in the map. Since we don't have access to the rendering code, I'll provide a more comprehensive fix that addresses potential rounding issues:

```javascript
### src/ol/ImageBase.js
<<<<<<< SEARCH
  /**
   * @return {number} PixelRatio.
   */
  getPixelRatio() {
    return this.pixelRatio_;
  }
=======
  /**
   * @return {number} PixelRatio.
   */
  getPixelRatio() {
    // Ensure we're using a precise pixel ratio to avoid blurry rendering
    // when dealing with non-integer ratios or dimensions
    return Math.round(this.pixelRatio_ * 1000) / 1000;
  }
>>>>>>> REPLACE
```

However, this approach might not fully solve the issue. The real problem might be in how the image is positioned and sized in the DOM. Without seeing the rendering code, I'll provide a more general solution:

```javascript
### src/ol/ImageBase.js
<<<<<<< SEARCH
  constructor(extent, resolution, pixelRatio, state) {
    super();

    /**
     * @protected
     * @type {import("./extent.js").Extent}
     */
    this.extent = extent;

    /**
     * @private
     * @type {number}
     */
    this.pixelRatio_ = pixelRatio;

    /**
     * @protected
     * @type {number|undefined}
     */
    this.resolution = resolution;

    /**
     * @protected
     * @type {import("./ImageState.js").default}
     */
    this.state = state;
  }
=======
  constructor(extent, resolution, pixelRatio, state) {
    super();

    /**
     * @protected
     * @type {import("./extent.js").Extent}
     */
    this.extent = extent;

    /**
     * @private
     * @type {number}
     */
    this.pixelRatio_ = pixelRatio;

    /**
     * @protected
     * @type {number|undefined}
     */
    this.resolution = resolution;

    /**
     * @protected
     * @type {import("./ImageState.js").default}
     */
    this.state = state;
  }
>>>>>>> REPLACE
```

Since the issue is likely in how the image is rendered rather than in the `ImageBase.js` file itself, we might need to look at other files that handle the actual rendering of the image. The issue description mentions WMS images specifically, so the problem might be in the WMS source implementation or in how the images are positioned in the DOM.

Without more context, it's difficult to provide a precise fix. The issue might require adjustments to the CSS, ensuring that images are positioned at integer pixel boundaries, or modifying how the image dimensions are calculated based on the pixel ratio.
