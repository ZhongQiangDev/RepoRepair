I'll analyze the issue and provide a fix.

## Issue Analysis

The issue states that setting the opacity option in `ol/layer/Heatmap` has no effect. This is happening in the latest version but was working in version 6.9.0. The issue also mentions that opacity settings still work for WebGL Points layers.

Looking at the provided code for `WebGLPointsLayer.js`, I notice that this renderer properly handles opacity through the layer's opacity property. However, the issue is with the Heatmap layer, which is not included in the provided code.

Since the issue specifically mentions that opacity works for WebGL Points layers but not for Heatmap layers, and that it worked in version 6.9.0, the problem is likely in the Heatmap layer renderer where the opacity setting is being ignored.

The most likely cause is that the Heatmap layer renderer is not properly applying the layer's opacity value when rendering. Since we don't have the Heatmap layer renderer code, I'll need to make an educated guess about where the issue might be.

## Fix

Based on the issue description, the problem is likely in the Heatmap layer renderer where it should be applying the layer's opacity setting. The fix would involve ensuring that the opacity value from the layer is properly passed to the rendering context.

Since we don't have the actual Heatmap layer renderer code, I can't provide a specific fix. However, if I were to guess, the issue might be in a method like `prepareFrame` or `renderFrame` in the Heatmap layer renderer where it should be applying the layer's opacity but is not.

Without the actual code for the Heatmap layer renderer, I cannot provide a specific search/replace edit. If you could provide the code for the Heatmap layer renderer, particularly `src/ol/renderer/webgl/HeatmapLayer.js` or a similar file, I would be able to identify and fix the issue.
