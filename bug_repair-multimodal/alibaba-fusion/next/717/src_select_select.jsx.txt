I'll analyze the issue and provide a fix.

## Bug Analysis

The issue is that when using `Select` component with `fillProps` but an empty `dataSource`, the selected value doesn't display properly. According to the issue description, when using:

```jsx
<Select fillProps="name" defaultValue="jack" ></Select>
```

The value "jack" should be displayed, but it's not showing.

Looking at the code, the problem is in the `renderValues` method. When `fillProps` is provided, it tries to access that property from the value object, but it doesn't handle the case where the value is a primitive (like a string) rather than an object.

## Fix

```javascript
### src/select/select.jsx
<<<<<<< SEARCH
            const retvalue = fillProps ? value[fillProps] : valueRender(value);
            // 0 => '0'
            return typeof retvalue === 'number'
                ? retvalue.toString()
                : retvalue;
=======
            // When fillProps is provided but value is not an object (e.g., string),
            // we should return the value directly instead of trying to access a property
            const retvalue = fillProps && typeof value === 'object' ? 
                value[fillProps] : 
                valueRender(value);
            // 0 => '0'
            return typeof retvalue === 'number'
                ? retvalue.toString()
                : retvalue;
>>>>>>> REPLACE
```

This fix checks if `fillProps` is provided AND the value is an object before trying to access a property from it. If the value is a primitive (like a string), it will use `valueRender` to render it properly.

The issue occurs because when `dataSource` is empty, the value remains a primitive string ("jack" in the example), but the code tries to access a property from it as if it were an object, resulting in nothing being displayed.
