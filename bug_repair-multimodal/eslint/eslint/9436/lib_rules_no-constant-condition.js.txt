I'll analyze the issue and provide a fix.

The issue is that the `no-constant-condition` rule is reporting errors for the entire statement or expression containing a constant condition, rather than just the constant condition itself. For example, in `if (true) {...}`, it's highlighting the entire if statement instead of just the `true` part.

Looking at the code, the problem is in the `reportIfConstant` function. When reporting an issue, it's using `node` as the location, which refers to the entire statement (like IfStatement or ConditionalExpression). Instead, it should use `node.test` to specifically target the constant condition.

Here's the fix:

```javascript
### lib/rules/no-constant-condition.js
<<<<<<< SEARCH
        function reportIfConstant(node) {
            if (node.test && isConstant(node.test, true)) {
                context.report({ node, message: "Unexpected constant condition." });
            }
        }
=======
        function reportIfConstant(node) {
            if (node.test && isConstant(node.test, true)) {
                context.report({ node: node.test, message: "Unexpected constant condition." });
            }
        }
>>>>>>> REPLACE
```

Similarly, we need to fix the same issue in the `checkConstantConditionLoopInSet` function:

```javascript
### lib/rules/no-constant-condition.js
<<<<<<< SEARCH
        function checkConstantConditionLoopInSet(node) {
            if (loopsInCurrentScope.has(node)) {
                loopsInCurrentScope.delete(node);
                context.report({ node, message: "Unexpected constant condition." });
            }
        }
=======
        function checkConstantConditionLoopInSet(node) {
            if (loopsInCurrentScope.has(node)) {
                loopsInCurrentScope.delete(node);
                context.report({ node: node.test, message: "Unexpected constant condition." });
            }
        }
>>>>>>> REPLACE
```

These changes will make the error highlighting focus only on the constant condition expressions themselves, rather than the entire statements containing them.
