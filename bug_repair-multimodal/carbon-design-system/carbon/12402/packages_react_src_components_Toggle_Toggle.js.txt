I'll analyze the issue and provide the necessary edits to implement the read-only toggle functionality.

## Bug Analysis

The issue is requesting the implementation of a "read-only" state for the Toggle component. Currently, the Toggle component has a disabled state but no read-only state. According to the acceptance criteria, when a toggle is read-only:
1. It should not allow the value to be changed
2. It should still be readable by screen readers
3. It should have appropriate styling

## Solution

We need to:
1. Add a `readOnly` prop to the Toggle component
2. Update the component to handle the read-only state
3. Add appropriate styling classes
4. Ensure the toggle can't be changed when in read-only mode

Here are the necessary edits:

```javascript
### packages/react/src/components/Toggle/Toggle.js
<<<<<<< SEARCH
export function Toggle({
  className,
  defaultToggled = false,
  disabled = false,
  hideLabel = false,
  id,
  labelA = 'Off',
  labelB = 'On',
  labelText,
  onClick,
  onToggle,
  size = 'md',
  toggled,
  ...other
}) {
=======
export function Toggle({
  className,
  defaultToggled = false,
  disabled = false,
  hideLabel = false,
  id,
  labelA = 'Off',
  labelB = 'On',
  labelText,
  onClick,
  onToggle,
  readOnly = false,
  size = 'md',
  toggled,
  ...other
}) {
>>>>>>> REPLACE
```

```javascript
### packages/react/src/components/Toggle/Toggle.js
<<<<<<< SEARCH
  function handleClick(e) {
    setChecked(!checked);

    if (onClick) {
      onClick(e);
    }
  }
=======
  function handleClick(e) {
    if (!readOnly) {
      setChecked(!checked);

      if (onClick) {
        onClick(e);
      }
    }
  }
>>>>>>> REPLACE
```

```javascript
### packages/react/src/components/Toggle/Toggle.js
<<<<<<< SEARCH
  const wrapperClasses = classNames(
    `${prefix}--toggle`,
    {
      [`${prefix}--toggle--disabled`]: disabled,
    },
    className
  );
=======
  const wrapperClasses = classNames(
    `${prefix}--toggle`,
    {
      [`${prefix}--toggle--disabled`]: disabled,
      [`${prefix}--toggle--readonly`]: readOnly,
    },
    className
  );
>>>>>>> REPLACE
```

```javascript
### packages/react/src/components/Toggle/Toggle.js
<<<<<<< SEARCH
        disabled={disabled}
        onClick={handleClick}
=======
        disabled={disabled}
        onClick={handleClick}
        aria-readonly={readOnly || null}
>>>>>>> REPLACE
```

```javascript
### packages/react/src/components/Toggle/Toggle.js
<<<<<<< SEARCH
Toggle.propTypes = {
  /**
   * Specify a custom className to apply to the form-item node
   */
  className: PropTypes.string,

  /**
   * Specify whether the toggle should be on by default
   */
  defaultToggled: PropTypes.bool,

  /**
   * Whether this control should be disabled
   */
  disabled: PropTypes.bool,

  /**
   * Specify whether the label should be hidden, or not
   */
  hideLabel: PropTypes.bool,

  /**
   * Provide an id that unique represents the underlying `<button>`
   */
  id: PropTypes.string.isRequired,

  /**
   * Specify the label for the "off" position
   */
  labelA: PropTypes.node,

  /**
   * Specify the label for the "on" position
   */
  labelB: PropTypes.node,

  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes.node.isRequired,

  /**
   * Provide an event listener that is called when the control is clicked
   */
  onClick: PropTypes.func,

  /**
   * Provide an event listener that is called when the control is toggled
   */
  onToggle: PropTypes.func,

  /**
   * Specify the size of the Toggle. Currently only supports 'sm' or 'md' (default)
   */
  size: PropTypes.oneOf(['sm', 'md']),

  /**
   * Specify whether the control is toggled
   */
  toggled: PropTypes.bool,
};
=======
Toggle.propTypes = {
  /**
   * Specify a custom className to apply to the form-item node
   */
  className: PropTypes.string,

  /**
   * Specify whether the toggle should be on by default
   */
  defaultToggled: PropTypes.bool,

  /**
   * Whether this control should be disabled
   */
  disabled: PropTypes.bool,

  /**
   * Specify whether the label should be hidden, or not
   */
  hideLabel: PropTypes.bool,

  /**
   * Provide an id that unique represents the underlying `<button>`
   */
  id: PropTypes.string.isRequired,

  /**
   * Specify the label for the "off" position
   */
  labelA: PropTypes.node,

  /**
   * Specify the label for the "on" position
   */
  labelB: PropTypes.node,

  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes.node.isRequired,

  /**
   * Provide an event listener that is called when the control is clicked
   */
  onClick: PropTypes.func,

  /**
   * Provide an event listener that is called when the control is toggled
   */
  onToggle: PropTypes.func,

  /**
   * Specify if the toggle should be read-only
   */
  readOnly: PropTypes.bool,

  /**
   * Specify the size of the Toggle. Currently only supports 'sm' or 'md' (default)
   */
  size: PropTypes.oneOf(['sm', 'md']),

  /**
   * Specify whether the control is toggled
   */
  toggled: PropTypes.bool,
};
>>>>>>> REPLACE
```

These changes implement the read-only functionality for the Toggle component by:

1. Adding a `readOnly` prop with a default value of `false`
2. Preventing state changes when the component is in read-only mode
3. Adding appropriate CSS classes for styling the read-only state
4. Adding the `aria-readonly` attribute for accessibility
5. Adding proper PropTypes documentation for the new prop

With these changes, the Toggle component will now support a read-only state that meets the acceptance criteria: it will be readable by screen readers but won't allow the value to be changed.
