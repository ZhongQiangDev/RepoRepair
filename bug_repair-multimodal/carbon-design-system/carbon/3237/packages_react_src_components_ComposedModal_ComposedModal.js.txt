I'll analyze the issue and provide a solution.

## Bug Analysis

The issue is that when a modal is open, the background (body) can still be scrolled, which is not the expected behavior for most modal implementations. The user wants to disable scrolling on the body element when the modal is open.

Looking at the `ComposedModal` component, there's no code that prevents scrolling of the body when the modal is open. We need to add functionality to:

1. Add a class or style to the body element when the modal opens
2. Remove that class or style when the modal closes

## Solution

We need to modify the `ComposedModal.js` file to add body scroll locking when the modal is open. Here's the fix:

```javascript
### packages/react/src/components/ComposedModal/ComposedModal.js
<<<<<<< SEARCH
  componentDidUpdate(prevProps) {
    if (!prevProps.open && this.props.open) {
      this.beingOpen = true;
    } else if (prevProps.open && !this.props.open) {
      this.beingOpen = false;
    }
  }
=======
  componentDidUpdate(prevProps) {
    if (!prevProps.open && this.props.open) {
      this.beingOpen = true;
      document.body.classList.add(`${prefix}--modal-open`);
    } else if (prevProps.open && !this.props.open) {
      this.beingOpen = false;
      document.body.classList.remove(`${prefix}--modal-open`);
    }
  }
>>>>>>> REPLACE
```

```javascript
### packages/react/src/components/ComposedModal/ComposedModal.js
<<<<<<< SEARCH
  componentDidMount() {
    if (!this.props.open) {
      return;
    }
    this.focusButton(this.innerModal.current);
  }
=======
  componentDidMount() {
    if (!this.props.open) {
      return;
    }
    document.body.classList.add(`${prefix}--modal-open`);
    this.focusButton(this.innerModal.current);
  }
>>>>>>> REPLACE
```

```javascript
### packages/react/src/components/ComposedModal/ComposedModal.js
<<<<<<< SEARCH
  closeModal = () => {
    const { onClose } = this.props;
    if (!onClose || onClose() !== false) {
      this.setState({
        open: false,
      });
    }
  };
=======
  closeModal = () => {
    const { onClose } = this.props;
    if (!onClose || onClose() !== false) {
      this.setState({
        open: false,
      });
      document.body.classList.remove(`${prefix}--modal-open`);
    }
  };
>>>>>>> REPLACE
```

```javascript
### packages/react/src/components/ComposedModal/ComposedModal.js
<<<<<<< SEARCH
  componentDidMount() {
    if (!this.props.open) {
      return;
    }
    this.focusButton(this.innerModal.current);
  }
=======
  componentDidMount() {
    if (!this.props.open) {
      return;
    }
    this.focusButton(this.innerModal.current);
  }

  componentWillUnmount() {
    document.body.classList.remove(`${prefix}--modal-open`);
  }
>>>>>>> REPLACE
```

These changes will:
1. Add a CSS class `bx--modal-open` (assuming the prefix is 'bx') to the body when the modal opens
2. Remove the class when the modal closes
3. Ensure the class is removed when the component unmounts

The CSS class can then be styled in the CSS files to prevent scrolling with something like:
```css
.bx--modal-open {
  overflow: hidden;
}
```

This solution follows the pattern mentioned in the issue where Bootstrap adds a `modal-open` class to the body element when a modal is open.
