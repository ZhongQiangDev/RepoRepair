I'll analyze the issue and provide a fix.

## Bug Analysis

The issue is that when an icon-only button has focus, its tooltip is displayed. When hovering over another icon-only button, that button's tooltip is also displayed, resulting in two overlapping tooltips.

Looking at the Button component, I can see that icon-only buttons are given the CSS classes:
- `${prefix}--tooltip__trigger`
- `${prefix}--tooltip--a11y`
- `${prefix}--tooltip--${tooltipPosition}`
- `${prefix}--tooltip--align-${tooltipAlignment}`

These classes are responsible for the tooltip behavior. The issue is that the tooltip is shown both on focus and on hover, causing the overlap when one button is focused and another is hovered.

## Solution

We need to modify the Button component to prevent the overlap of tooltips. The best approach is to add a specific class for icon-only buttons that will ensure only one tooltip is visible at a time. Carbon Design System typically uses CSS to handle these interactions, so we'll add a class that can be targeted by CSS to fix this behavior.

Here's the fix:

```javascript
### packages/react/src/components/Button/Button.js
<<<<<<< SEARCH
  const buttonClasses = classNames(className, {
    [`${prefix}--btn`]: true,
    [`${prefix}--btn--field`]: size === 'field',
    [`${prefix}--btn--sm`]: size === 'small' || size === 'sm' || small,
    [`${prefix}--btn--lg`]: size === 'lg',
    [`${prefix}--btn--xl`]: size === 'xl',
    [`${prefix}--btn--${kind}`]: kind,
    [`${prefix}--btn--disabled`]: disabled,
    [`${prefix}--btn--icon-only`]: hasIconOnly,
    [`${prefix}--btn--selected`]: hasIconOnly && isSelected && kind === 'ghost',
    [`${prefix}--tooltip__trigger`]: hasIconOnly,
    [`${prefix}--tooltip--a11y`]: hasIconOnly,
    [`${prefix}--tooltip--${tooltipPosition}`]: hasIconOnly && tooltipPosition,
    [`${prefix}--tooltip--align-${tooltipAlignment}`]:
      hasIconOnly && tooltipAlignment,
  });
=======
  const buttonClasses = classNames(className, {
    [`${prefix}--btn`]: true,
    [`${prefix}--btn--field`]: size === 'field',
    [`${prefix}--btn--sm`]: size === 'small' || size === 'sm' || small,
    [`${prefix}--btn--lg`]: size === 'lg',
    [`${prefix}--btn--xl`]: size === 'xl',
    [`${prefix}--btn--${kind}`]: kind,
    [`${prefix}--btn--disabled`]: disabled,
    [`${prefix}--btn--icon-only`]: hasIconOnly,
    [`${prefix}--btn--selected`]: hasIconOnly && isSelected && kind === 'ghost',
    [`${prefix}--tooltip__trigger`]: hasIconOnly,
    [`${prefix}--tooltip--a11y`]: hasIconOnly,
    [`${prefix}--tooltip--${tooltipPosition}`]: hasIconOnly && tooltipPosition,
    [`${prefix}--tooltip--align-${tooltipAlignment}`]:
      hasIconOnly && tooltipAlignment,
    [`${prefix}--tooltip--icon-only`]: hasIconOnly,
  });
>>>>>>> REPLACE
```

This adds a new CSS class `${prefix}--tooltip--icon-only` to icon-only buttons. With this class, we can add CSS rules in the Carbon styles to ensure that when hovering over an icon-only button, any other tooltip from a focused button is hidden.

Note: This fix assumes that the corresponding CSS will be added to the Carbon styles to handle the interaction between tooltips. The CSS rule would need to hide the tooltip of a focused button when hovering over another button with the `${prefix}--tooltip--icon-only` class.

The CSS implementation would look something like:
```css
.bx--tooltip--icon-only:hover ~ .bx--tooltip--icon-only:focus .bx--assistive-text,
.bx--tooltip--icon-only:hover ~ .bx--tooltip--icon-only:focus + .bx--assistive-text {
  visibility: hidden;
}
```

However, since we're only modifying the React component here, we're adding the class that can be targeted by CSS rules.
