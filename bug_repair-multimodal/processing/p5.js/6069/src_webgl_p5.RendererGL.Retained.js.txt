I'll analyze the issue and provide a fix.

## Bug Analysis

The issue is that when using `blendMode(ADD)` with `point()` in WebGL mode, the blend mode is not being applied correctly. When two points overlap, the color of the overlapping area becomes the color of the last point drawn, rather than blending the colors as expected.

Looking at the code, the problem is in the `_drawPoints` method in `src/webgl/p5.RendererGL.Retained.js`. This method is missing a call to `_applyColorBlend()`, which is necessary to apply the current blend mode to the points being drawn.

The issue reporter correctly identified the solution: we need to add a call to `_applyColorBlend()` with the current stroke color before drawing the points.

## Fix

```javascript
### src/webgl/p5.RendererGL.Retained.js
<<<<<<< SEARCH
  pointShader.enableAttrib(pointShader.attributes.aPosition, 3);

  gl.drawArrays(gl.Points, 0, vertices.length);
=======
  pointShader.enableAttrib(pointShader.attributes.aPosition, 3);

  this._applyColorBlend(this.curStrokeColor);

  gl.drawArrays(gl.Points, 0, vertices.length);
>>>>>>> REPLACE
```

This change adds the missing call to `_applyColorBlend()` with the current stroke color (`this.curStrokeColor`) before drawing the points. This will ensure that the blend mode is correctly applied when drawing points in WebGL mode, allowing colors to blend properly when points overlap.
