1. **Identify the wrong behavior involved in `GitHub Problem Description`:**
   The issue is that when using `blendMode(ADD)` and drawing overlapping points with different colors, the expected additive blending effect does not occur. Instead of the overlapping area showing a combined color (like magenta for red and blue), it only shows the color of the point drawn last.

2. **Analyze the cause behind the wrong behavior:**
   The problem arises because the `_applyColorBlend()` function, which is responsible for applying the blend mode, is not being called in the `_drawPoints()` method. This means that the WebGL renderer is not properly applying the blend mode when drawing points, leading to the incorrect blending behavior.

3. **Find up to 5 files most related to the cause:**
   ```
   src/webgl/p5.RendererGL.Retained.js
   src/webgl/p5.RendererGL.js
   src/webgl/material.js
   src/core/rendering.js
   src/webgl/p5.RendererGL.Immediate.js
   ```

   - `src/webgl/p5.RendererGL.Retained.js`: This file contains the `_drawPoints()` method where the suggested fix should be applied.
   - `src/webgl/p5.RendererGL.js`: Contains the `blendMode` function and other WebGL rendering functions that interact with blend modes.
   - `src/webgl/material.js`: Contains the `_applyColorBlend()` function, which needs to be called in `_drawPoints()`.
   - `src/core/rendering.js`: Contains the `blendMode` function that sets the blend mode for the renderer.
   - `src/webgl/p5.RendererGL.Immediate.js`: Contains methods related to immediate mode rendering, which might also be relevant for ensuring consistent blending behavior.
