1. **Identify the wrong behavior involved in `GitHub Problem Description`:**
   - The current behavior of the `stroke` function in WebGL mode does not interpolate colors between vertices when drawing lines. Instead, it only uses the last color specified for the entire line, unlike the `fill` function which interpolates colors between vertices.

2. **Analyze the cause behind the wrong behavior:**
   - The issue arises because the `stroke` function in WebGL mode does not store or pass color information for each vertex to the shaders. The vertex shader does not receive the necessary color data to interpolate between vertices, and the fragment shader lacks the logic to handle per-vertex color interpolation for strokes.

3. **Find up to 5 files most related to the cause from `Repository Information`:**

```
src/webgl/p5.RendererGL.Immediate.js
src/webgl/p5.Geometry.js
src/webgl/p5.RenderBuffer.js
src/webgl/p5.RendererGL.js
src/webgl/p5.Shader.js
```

- `src/webgl/p5.RendererGL.Immediate.js`: This file handles the immediate mode rendering of shapes and lines. It needs modifications to store and pass per-vertex stroke color information.
- `src/webgl/p5.Geometry.js`: This file manages the geometry data, including vertices and colors. It needs to be updated to include stroke color information for each vertex.
- `src/webgl/p5.RenderBuffer.js`: This file manages render buffers, which will need to be updated to include the new stroke color attribute.
- `src/webgl/p5.RendererGL.js`: This file contains the WebGL renderer setup and rendering logic. It needs to be modified to handle the new stroke color attribute and pass it to the shaders.
- `src/webgl/p5.Shader.js`: This file manages shaders. The vertex and fragment shaders need to be updated to handle and interpolate per-vertex stroke colors.
