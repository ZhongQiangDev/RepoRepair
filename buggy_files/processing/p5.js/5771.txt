1. **Identify the wrong behavior involved in `GitHub Problem Description`:**
   - The issue is that when using `beginShape(QUADS)` in WebGL mode, the resulting shape has self-intersections, unlike in 2D mode where it forms a proper rectangle. This indicates a discrepancy in how vertex ordering is handled between the two rendering modes.

2. **Analyze the cause behind the wrong behavior:**
   - The cause is likely due to the WebGL renderer treating the vertex ordering for `QUADS` in a manner similar to `QUAD_STRIP`, which results in incorrect triangulation. In 2D mode, the vertices are correctly interpreted as a single quad, but in WebGL mode, they are being split into two triangles that intersect, leading to the observed self-intersection.

3. **Find up to 5 files most related to the cause from `Repository Information`:**
   ```
   src/webgl/p5.RendererGL.Immediate.js
   src/core/shape/vertex.js
   src/webgl/p5.RendererGL.js
   src/webgl/p5.Geometry.js
   src/core/rendering.js
   ```

   - `src/webgl/p5.RendererGL.Immediate.js`: This file contains the `beginShape` and `vertex` methods for WebGL immediate mode rendering, which are directly involved in how vertices are processed and rendered.
   - `src/core/shape/vertex.js`: This file contains the `beginShape` and `vertex` methods for 2D rendering, which can be compared to understand the difference in vertex handling.
   - `src/webgl/p5.RendererGL.js`: This file contains general WebGL rendering methods and setup, which may include settings affecting vertex processing.
   - `src/webgl/p5.Geometry.js`: This file handles the creation and manipulation of 3D geometry, including tessellation and vertex management, which could be relevant for ensuring correct triangulation.
   - `src/core/rendering.js`: This file contains the `createCanvas` method, which sets up the rendering context and may influence how WebGL is initialized and configured.
