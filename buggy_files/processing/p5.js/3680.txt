### 1. Identify the Wrong Behavior Involved in GitHub Problem Description

The issue described is that when rendering a custom shape (specifically the letter "C") in WebGL mode, the fill is not working as expected. Instead of filling the interior of the "C" shape, it creates an unintended fill from the lower extremity of the "C" to the origin (top left of the letter).

### 2. Analyze the Cause Behind the Wrong Behavior

The problem likely stems from how the vertices are being processed and rendered in WebGL mode. In 2D mode, the `endShape(CLOSE)` function correctly closes the shape and fills it as expected. However, in WebGL mode, the tessellation and rendering of the shape might not handle the vertex data correctly, leading to the unintended fill behavior. This could be due to issues with how the vertices are being tessellated into triangles or how the fill operation is being applied in the WebGL renderer.

### 3. Find Up to 5 Files Most Related to the Cause

```
src/webgl/p5.RendererGL.Immediate.js
src/webgl/p5.RendererGL.js
src/core/shape/vertex.js
src/webgl/p5.Geometry.js
src/webgl/p5.RendererGL.Retained.js
```

**Explanation:**

- **`src/webgl/p5.RendererGL.Immediate.js`**: This file contains the `beginShape`, `vertex`, and `endShape` methods that are directly responsible for rendering custom shapes in immediate mode. The `_tesselateShape` method, in particular, is crucial for converting the vertex data into triangles for WebGL rendering. Any issues with tessellation could lead to the unintended fill behavior.

- **`src/webgl/p5.RendererGL.js`**: This file contains the core WebGL rendering logic, including methods for setting fill and stroke colors, and managing shaders. The `_setFillUniforms` method and other related functions ensure that the fill color is applied correctly. If there's a problem with how the fill is being applied in WebGL, this file would be a key area to investigate.

- **`src/core/shape/vertex.js`**: This file contains the `beginShape`, `vertex`, and `endShape` methods that are used to define and render custom shapes. While these methods are shared between 2D and WebGL modes, they play a crucial role in how the vertex data is collected and passed to the WebGL renderer. Any discrepancies in how these methods handle vertex data could contribute to the issue.

- **`src/webgl/p5.Geometry.js`**: This file manages 3D geometry and includes methods for normalizing, resetting, and computing normals for vertices. While the issue is with a 2D shape, the geometry handling in WebGL might still be relevant if there's a problem with how the vertices are being processed or normalized.

- **`src/webgl/p5.RendererGL.Retained.js`**: This file contains methods for rendering geometry in retained mode, including buffer management and drawing operations. While the issue is in immediate mode, retained mode rendering might still be relevant if there are shared components or dependencies that could affect the immediate mode rendering.
