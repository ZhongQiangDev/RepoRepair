### 1. Identify the Wrong Behavior Involved in `GitHub Problem Description`

The wrong behavior involves the Prism.js highlighter breaking when it encounters a backtick character (`) in the code. Specifically, the highlighting stops at the backtick, and the rest of the code is not properly highlighted.

### 2. Analyze the Cause Behind the Wrong Behavior

The issue likely stems from how Prism.js handles string literals and template literals in JavaScript. The backtick character is used to denote template literals in JavaScript, which can contain embedded expressions. If Prism.js is not correctly identifying the backtick as the start of a template literal, it may prematurely end the string or template literal tokenization, leading to the highlighting breaking.

### 3. Find Up to 5 Files Most Related to the Cause

```
components/prism-javascript.js
components/prism-js-extras.js
components/prism-js-templates.js
components/prism-core.js
plugins/unescaped-markup/prism-unescaped-markup.js
```

- **components/prism-javascript.js**: This file defines the core JavaScript language rules for Prism.js, including string and template literal handling. It is crucial for understanding how template literals are processed.
- **components/prism-js-extras.js**: This file extends the JavaScript language definition with additional rules, which might include handling for template literals.
- **components/prism-js-templates.js**: This file specifically handles template literals in JavaScript, ensuring they are correctly highlighted.
- **components/prism-core.js**: This file contains the core functionality of Prism.js, including the tokenization process. Issues in the core tokenization logic could affect how backticks are handled.
- **plugins/unescaped-markup/prism-unescaped-markup.js**: This plugin might affect how certain characters, including backticks, are processed in unescaped markup scenarios.
